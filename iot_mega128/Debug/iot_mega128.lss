
iot_mega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f2  00800100  00001592  00001626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018b  008002f2  008002f2  00001818  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d1  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8a  00000000  00000000  00002c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081c  00000000  00000000  000037cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00003fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000446  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c3       	rjmp	.+1548   	; 0x656 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	4c c0       	rjmp	.+152    	; 0xee <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c6       	rjmp	.+3424   	; 0xdda <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e9       	ldi	r30, 0x92	; 146
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3f       	cpi	r26, 0xF2	; 242
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a2 ef       	ldi	r26, 0xF2	; 242
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 37       	cpi	r26, 0x7D	; 125
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d0 d0       	rcall	.+416    	; 0x264 <main>
      c4:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <CDS_init>:
#include <avr/interrupt.h>
#include "adc.h"
volatile int cdsValue;
volatile int adc0Flag;
void CDS_init() {
	DDRF &= ~0x01;  //PF0 : ADC0
      ca:	e1 e6       	ldi	r30, 0x61	; 97
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	8e 7f       	andi	r24, 0xFE	; 254
      d2:	80 83       	st	Z, r24
	ADCSRA = 0x9c;	//ADC Enable, 500KHz, interrupt enable
      d4:	8c e9       	ldi	r24, 0x9C	; 156
      d6:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;
      d8:	80 e4       	ldi	r24, 0x40	; 64
      da:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      dc:	87 e5       	ldi	r24, 0x57	; 87
      de:	92 e0       	ldi	r25, 0x02	; 2
      e0:	01 97       	sbiw	r24, 0x01	; 1
      e2:	f1 f7       	brne	.-4      	; 0xe0 <CDS_init+0x16>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <CDS_init+0x1c>
      e6:	00 00       	nop
      e8:	08 95       	ret

000000ea <CDS_start>:
	_delay_us(150);
}
void CDS_start() {
	//ADMUX = 0x40;
	ADCSRA |= 0x40;
      ea:	36 9a       	sbi	0x06, 6	; 6
      ec:	08 95       	ret

000000ee <__vector_21>:
}
ISR(ADC_vect) {
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	0f 92       	push	r0
      f6:	11 24       	eor	r1, r1
      f8:	8f 93       	push	r24
      fa:	9f 93       	push	r25
	if(ADMUX == 0x40) {
      fc:	87 b1       	in	r24, 0x07	; 7
      fe:	80 34       	cpi	r24, 0x40	; 64
     100:	61 f4       	brne	.+24     	; 0x11a <__vector_21+0x2c>
		cdsValue = ADC;  //ADCL + ADCH*256
     102:	84 b1       	in	r24, 0x04	; 4
     104:	95 b1       	in	r25, 0x05	; 5
     106:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <cdsValue+0x1>
     10a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <cdsValue>
		adc0Flag = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <adc0Flag+0x1>
     116:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <adc0Flag>
	}
     11a:	9f 91       	pop	r25
     11c:	8f 91       	pop	r24
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <TIMER0_init>:
extern volatile int cdsValue;
extern volatile int adc0Flag;
volatile unsigned long systic_count;
volatile unsigned long systic_sec;
void TIMER0_init() {
	TCCR0 = 0x0E; //CTC mode(2), OC0 disable ,divide:256, 16Mhz/256 = 16us * 250 = 4ms
     128:	8e e0       	ldi	r24, 0x0E	; 14
     12a:	83 bf       	out	0x33, r24	; 51
	ASSR = 0x00;
     12c:	10 be       	out	0x30, r1	; 48
	OCR0 = 249;
     12e:	89 ef       	ldi	r24, 0xF9	; 249
     130:	81 bf       	out	0x31, r24	; 49
	TIMSK = 0xff;
     132:	8f ef       	ldi	r24, 0xFF	; 255
     134:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0;
     136:	12 be       	out	0x32, r1	; 50
     138:	08 95       	ret

0000013a <__vector_15>:
}
ISR(TIMER0_COMP_vect)
{
     13a:	1f 92       	push	r1
     13c:	0f 92       	push	r0
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	0b b6       	in	r0, 0x3b	; 59
     146:	0f 92       	push	r0
     148:	2f 93       	push	r18
     14a:	3f 93       	push	r19
     14c:	4f 93       	push	r20
     14e:	5f 93       	push	r21
     150:	6f 93       	push	r22
     152:	7f 93       	push	r23
     154:	8f 93       	push	r24
     156:	9f 93       	push	r25
     158:	af 93       	push	r26
     15a:	bf 93       	push	r27
     15c:	ef 93       	push	r30
     15e:	ff 93       	push	r31
	systic_count++;
     160:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <systic_count>
     164:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <systic_count+0x1>
     168:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <systic_count+0x2>
     16c:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <systic_count+0x3>
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	a1 1d       	adc	r26, r1
     174:	b1 1d       	adc	r27, r1
     176:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <systic_count>
     17a:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <systic_count+0x1>
     17e:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <systic_count+0x2>
     182:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <systic_count+0x3>
	if(!(systic_count%250)) { //1sec
     186:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <systic_count>
     18a:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <systic_count+0x1>
     18e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <systic_count+0x2>
     192:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <systic_count+0x3>
     196:	2a ef       	ldi	r18, 0xFA	; 250
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	59 d6       	rcall	.+3250   	; 0xe52 <__udivmodsi4>
     1a0:	67 2b       	or	r22, r23
     1a2:	68 2b       	or	r22, r24
     1a4:	69 2b       	or	r22, r25
     1a6:	39 f5       	brne	.+78     	; 0x1f6 <__vector_15+0xbc>
		systic_sec++;
     1a8:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <systic_sec>
     1ac:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <systic_sec+0x1>
     1b0:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <systic_sec+0x2>
     1b4:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <systic_sec+0x3>
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	a1 1d       	adc	r26, r1
     1bc:	b1 1d       	adc	r27, r1
     1be:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <systic_sec>
     1c2:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <systic_sec+0x1>
     1c6:	a0 93 04 03 	sts	0x0304, r26	; 0x800304 <systic_sec+0x2>
     1ca:	b0 93 05 03 	sts	0x0305, r27	; 0x800305 <systic_sec+0x3>
		if(systic_sec >= 60) systic_sec = 0;
     1ce:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <systic_sec>
     1d2:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <systic_sec+0x1>
     1d6:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <systic_sec+0x2>
     1da:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <systic_sec+0x3>
     1de:	cc 97       	sbiw	r24, 0x3c	; 60
     1e0:	a1 05       	cpc	r26, r1
     1e2:	b1 05       	cpc	r27, r1
     1e4:	40 f0       	brcs	.+16     	; 0x1f6 <__vector_15+0xbc>
     1e6:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <systic_sec>
     1ea:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <systic_sec+0x1>
     1ee:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <systic_sec+0x2>
     1f2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <systic_sec+0x3>
//		PORTA ^= 0x01;
	}
}
     1f6:	ff 91       	pop	r31
     1f8:	ef 91       	pop	r30
     1fa:	bf 91       	pop	r27
     1fc:	af 91       	pop	r26
     1fe:	9f 91       	pop	r25
     200:	8f 91       	pop	r24
     202:	7f 91       	pop	r23
     204:	6f 91       	pop	r22
     206:	5f 91       	pop	r21
     208:	4f 91       	pop	r20
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0b be       	out	0x3b, r0	; 59
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <Wifi_init>:
	}
}

void Wifi_init()
{	
	while(!ESP8266_Begin());
     21c:	10 d4       	rcall	.+2080   	; 0xa3e <ESP8266_Begin>
     21e:	88 23       	and	r24, r24
     220:	e9 f3       	breq	.-6      	; 0x21c <Wifi_init>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	22 d4       	rcall	.+2116   	; 0xa6a <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);		/* 0 = Single; 1 = Multi */
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	d7 d3       	rcall	.+1966   	; 0x9d8 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);	/* 0 = Normal Mode; 1 = Transperant Mode */
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	a2 d3       	rcall	.+1860   	; 0x972 <ESP8266_ApplicationMode>
     22e:	ad d4       	rcall	.+2394   	; 0xb8a <ESP8266_connected>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	29 f4       	brne	.+10     	; 0x23e <Wifi_init+0x22>
     234:	6e e0       	ldi	r22, 0x0E	; 14
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     236:	71 e0       	ldi	r23, 0x01	; 1
     238:	87 e1       	ldi	r24, 0x17	; 23
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	49 d4       	rcall	.+2194   	; 0xad0 <ESP8266_JoinAccessPoint>
     23e:	42 e2       	ldi	r20, 0x22	; 34
	ESP8266_Start(0, DOMAIN, PORT);
     240:	51 e0       	ldi	r21, 0x01	; 1
     242:	67 e2       	ldi	r22, 0x27	; 39
     244:	71 e0       	ldi	r23, 0x01	; 1
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	cb d4       	rcall	.+2454   	; 0xbe0 <ESP8266_Start>
     24a:	2f ef       	ldi	r18, 0xFF	; 255
     24c:	80 e7       	ldi	r24, 0x70	; 112
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	21 50       	subi	r18, 0x01	; 1
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	90 40       	sbci	r25, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <Wifi_init+0x34>
     258:	00 c0       	rjmp	.+0      	; 0x25a <Wifi_init+0x3e>
     25a:	00 00       	nop
     25c:	88 e3       	ldi	r24, 0x38	; 56
	_delay_ms(50);
	ESP8266_Send("["CLIENT_ID"]sign@"CLIENT_PW"");
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	21 c5       	rjmp	.+2626   	; 0xca4 <ESP8266_Send>
     262:	08 95       	ret

00000264 <main>:
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
		if(systic_sec >= 60) systic_sec = 0;
//		PORTA ^= 0x01;
	}
}
int main(void)
{
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	cc 5e       	subi	r28, 0xEC	; 236
     26e:	d1 09       	sbc	r29, r1
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	char _buffer[100];
	char *pToken;
	char *pArray[PARR_CNT]={0};
     27a:	fe 01       	movw	r30, r28
     27c:	eb 59       	subi	r30, 0x9B	; 155
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	8c e0       	ldi	r24, 0x0C	; 12
     282:	df 01       	movw	r26, r30
     284:	1d 92       	st	X+, r1
     286:	8a 95       	dec	r24
     288:	e9 f7       	brne	.-6      	; 0x284 <main+0x20>
	char senddata[100]={0};
     28a:	3c 96       	adiw	r30, 0x0c	; 12
     28c:	84 e6       	ldi	r24, 0x64	; 100
     28e:	df 01       	movw	r26, r30
     290:	1d 92       	st	X+, r1
     292:	8a 95       	dec	r24
     294:	e9 f7       	brne	.-6      	; 0x290 <main+0x2c>
	int getSensorTime=0;	
	unsigned long systic_sec_old=0;
	char getSensorId[20];

	UART0_init();			/* Initiate USART with 115200 baud rate */
     296:	b6 d1       	rcall	.+876    	; 0x604 <UART0_init>
	UART1_init();			/* Initiate USART with 115200 baud rate */
     298:	c5 d1       	rcall	.+906    	; 0x624 <UART1_init>
	CDS_init();
     29a:	17 df       	rcall	.-466    	; 0xca <CDS_init>
     29c:	45 df       	rcall	.-374    	; 0x128 <TIMER0_init>
	TIMER0_init();
     29e:	78 94       	sei
     2a0:	80 e0       	ldi	r24, 0x00	; 0
	sei();					/* Start global interrupt */
     2a2:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;
     2a4:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <__iob+0x3>
     2a8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <__iob+0x2>
     2ac:	8d e4       	ldi	r24, 0x4D	; 77

	UART0_string("main start!!\r\n");
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0d d2       	rcall	.+1050   	; 0x6cc <UART0_string>
     2b2:	b4 df       	rcall	.-152    	; 0x21c <Wifi_init>
	Wifi_init();
     2b4:	d0 9a       	sbi	0x1a, 0	; 26
     2b6:	19 df       	rcall	.-462    	; 0xea <CDS_start>
	DDRA |= 0x01; //PA0 output
     2b8:	81 2c       	mov	r8, r1
	CDS_start();
     2ba:	91 2c       	mov	r9, r1
     2bc:	54 01       	movw	r10, r8
	char _buffer[100];
	char *pToken;
	char *pArray[PARR_CNT]={0};
	char senddata[100]={0};
	int getSensorTime=0;	
	unsigned long systic_sec_old=0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	fe 01       	movw	r30, r28
	int i = 0;
	char _buffer[100];
	char *pToken;
	char *pArray[PARR_CNT]={0};
	char senddata[100]={0};
	int getSensorTime=0;	
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	3f 01       	movw	r6, r30
		if(systic_sec != systic_sec_old) {
//			adc0Flag = 0;
			CDS_start();
			systic_sec_old = systic_sec;
		}
		memset(_buffer, 0, sizeof(_buffer));
     2c8:	2e 01       	movw	r4, r28
     2ca:	f1 e7       	ldi	r31, 0x71	; 113
     2cc:	4f 0e       	add	r4, r31
		Read_Data(_buffer);		//수신포멧 :  \r\n+IPD,6:hello  끝문자 0x0a
		if(!strncmp(_buffer,"\r\n+IPD",4))			
		{
			senddata[0] = '\0';
     2ce:	51 1c       	adc	r5, r1
     2d0:	7e 01       	movw	r14, r28
     2d2:	25 e6       	ldi	r18, 0x65	; 101
     2d4:	e2 0e       	add	r14, r18
			UART0_string(_buffer);	UART0_string("\r\n");
			i = 0;				
			memset(pArray,0x0,sizeof(pArray));
     2d6:	f1 1c       	adc	r15, r1
     2d8:	ce 01       	movw	r24, r28
     2da:	8b 52       	subi	r24, 0x2B	; 43
     2dc:	9f 4f       	sbci	r25, 0xFF	; 255
					sprintf(senddata,"[%s]%s@%s@%s",CLIENT_ID,pArray[1],pArray[2], pArray[3]);
				} else {
					getSensorTime = 0;
					sprintf(senddata,"[%s]%s@%s@%d",CLIENT_ID,pArray[1],pArray[2], cdsValue);
				}
				strcpy(getSensorId,pArray[1]);
     2de:	c7 51       	subi	r28, 0x17	; 23
     2e0:	df 4f       	sbci	r29, 0xFF	; 255
     2e2:	99 83       	std	Y+1, r25	; 0x01
     2e4:	88 83       	st	Y, r24
     2e6:	c9 5e       	subi	r28, 0xE9	; 233
     2e8:	d0 40       	sbci	r29, 0x00	; 0
     2ea:	17 01       	movw	r2, r14
     2ec:	9c e0       	ldi	r25, 0x0C	; 12
     2ee:	29 0e       	add	r2, r25
     2f0:	31 1c       	adc	r3, r1
     2f2:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <systic_sec>
     2f6:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <systic_sec+0x1>
	Wifi_init();
	DDRA |= 0x01; //PA0 output
	CDS_start();
	while(1)
	{
		if(systic_sec != systic_sec_old) {
     2fa:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <systic_sec+0x2>
     2fe:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <systic_sec+0x3>
     302:	88 16       	cp	r8, r24
     304:	99 06       	cpc	r9, r25
     306:	aa 06       	cpc	r10, r26
     308:	bb 06       	cpc	r11, r27
     30a:	51 f0       	breq	.+20     	; 0x320 <main+0xbc>
     30c:	ee de       	rcall	.-548    	; 0xea <CDS_start>
     30e:	80 90 02 03 	lds	r8, 0x0302	; 0x800302 <systic_sec>
//			adc0Flag = 0;
			CDS_start();
     312:	90 90 03 03 	lds	r9, 0x0303	; 0x800303 <systic_sec+0x1>
			systic_sec_old = systic_sec;
     316:	a0 90 04 03 	lds	r10, 0x0304	; 0x800304 <systic_sec+0x2>
     31a:	b0 90 05 03 	lds	r11, 0x0305	; 0x800305 <systic_sec+0x3>
     31e:	02 c0       	rjmp	.+4      	; 0x324 <main+0xc0>
     320:	4c 01       	movw	r8, r24
     322:	5d 01       	movw	r10, r26
     324:	d3 01       	movw	r26, r6
     326:	e4 e6       	ldi	r30, 0x64	; 100
		}
		memset(_buffer, 0, sizeof(_buffer));
     328:	1d 92       	st	X+, r1
     32a:	ea 95       	dec	r30
     32c:	e9 f7       	brne	.-6      	; 0x328 <main+0xc4>
     32e:	c3 01       	movw	r24, r6
		Read_Data(_buffer);		//수신포멧 :  \r\n+IPD,6:hello  끝문자 0x0a
     330:	31 d5       	rcall	.+2658   	; 0xd94 <Read_Data>
     332:	44 e0       	ldi	r20, 0x04	; 4
     334:	50 e0       	ldi	r21, 0x00	; 0
		if(!strncmp(_buffer,"\r\n+IPD",4))			
     336:	6c e5       	ldi	r22, 0x5C	; 92
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	c3 01       	movw	r24, r6
     33c:	f6 d5       	rcall	.+3052   	; 0xf2a <strncmp>
     33e:	89 2b       	or	r24, r25
     340:	09 f0       	breq	.+2      	; 0x344 <main+0xe0>
     342:	13 c1       	rjmp	.+550    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     344:	d2 01       	movw	r26, r4
		{
			senddata[0] = '\0';
     346:	1c 92       	st	X, r1
     348:	c3 01       	movw	r24, r6
			UART0_string(_buffer);	UART0_string("\r\n");
     34a:	c0 d1       	rcall	.+896    	; 0x6cc <UART0_string>
     34c:	89 e5       	ldi	r24, 0x59	; 89
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	bd d1       	rcall	.+890    	; 0x6cc <UART0_string>
     352:	f7 01       	movw	r30, r14
     354:	2c e0       	ldi	r18, 0x0C	; 12
			i = 0;				
			memset(pArray,0x0,sizeof(pArray));
     356:	11 92       	st	Z+, r1
     358:	2a 95       	dec	r18
     35a:	e9 f7       	brne	.-6      	; 0x356 <main+0xf2>
     35c:	63 e6       	ldi	r22, 0x63	; 99
     35e:	71 e0       	ldi	r23, 0x01	; 1
			pToken = strtok(_buffer,"[@]");
     360:	c3 01       	movw	r24, r6
     362:	b6 d5       	rcall	.+2924   	; 0xed0 <strtok>
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	99 f0       	breq	.+38     	; 0x38e <main+0x12a>
     368:	d7 01       	movw	r26, r14
			while(pToken != NULL)
     36a:	8d 93       	st	X+, r24
     36c:	9d 93       	st	X+, r25
			{
				pArray[i] =  pToken;
     36e:	8d 01       	movw	r16, r26
     370:	07 c0       	rjmp	.+14     	; 0x380 <main+0x11c>
     372:	f8 01       	movw	r30, r16
     374:	81 93       	st	Z+, r24
     376:	91 93       	st	Z+, r25
     378:	8f 01       	movw	r16, r30
     37a:	e2 15       	cp	r30, r2
     37c:	f3 05       	cpc	r31, r3
				if(++i >= PARR_CNT)
     37e:	39 f0       	breq	.+14     	; 0x38e <main+0x12a>
     380:	63 e6       	ldi	r22, 0x63	; 99
     382:	71 e0       	ldi	r23, 0x01	; 1
					break;
				pToken = strtok(NULL,"[@]");
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a3 d5       	rcall	.+2886   	; 0xed0 <strtok>
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	91 f7       	brne	.-28     	; 0x372 <main+0x10e>
			senddata[0] = '\0';
			UART0_string(_buffer);	UART0_string("\r\n");
			i = 0;				
			memset(pArray,0x0,sizeof(pArray));
			pToken = strtok(_buffer,"[@]");
			while(pToken != NULL)
     38e:	d7 01       	movw	r26, r14
     390:	14 96       	adiw	r26, 0x04	; 4
			//pArray[3] : 송신 문자열2..
		
			// senddata form : [CLIENT_ID]destination ID@string1@string2...
			
			//UART0_string(senddata);// UART0_string("\r");
			if(!strcmp(pArray[2],"LED"))
     392:	1c 91       	ld	r17, X
     394:	14 97       	sbiw	r26, 0x04	; 4
     396:	15 96       	adiw	r26, 0x05	; 5
     398:	0c 91       	ld	r16, X
     39a:	67 e6       	ldi	r22, 0x67	; 103
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	81 2f       	mov	r24, r17
     3a0:	90 2f       	mov	r25, r16
     3a2:	b3 d5       	rcall	.+2918   	; 0xf0a <strcmp>
     3a4:	89 2b       	or	r24, r25
     3a6:	a1 f5       	brne	.+104    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3a8:	6e e9       	ldi	r22, 0x9E	; 158
     3aa:	71 e0       	ldi	r23, 0x01	; 1
			{
				if(!strcmp(pArray[3],"ON"))
     3ac:	f7 01       	movw	r30, r14
     3ae:	86 81       	ldd	r24, Z+6	; 0x06
     3b0:	97 81       	ldd	r25, Z+7	; 0x07
     3b2:	ab d5       	rcall	.+2902   	; 0xf0a <strcmp>
     3b4:	89 2b       	or	r24, r25
     3b6:	11 f4       	brne	.+4      	; 0x3bc <main+0x158>
     3b8:	d8 9a       	sbi	0x1b, 0	; 27
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <main+0x15a>
     3bc:	d8 98       	cbi	0x1b, 0	; 27
				PORTA |= 0x01;
     3be:	d7 01       	movw	r26, r14
     3c0:	17 96       	adiw	r26, 0x07	; 7
				else
				PORTA &= ~0x01;
     3c2:	8c 91       	ld	r24, X
				sprintf(senddata,"[%s]%s@%s@%s",CLIENT_ID,pArray[1],pArray[2], pArray[3]);
     3c4:	17 97       	sbiw	r26, 0x07	; 7
     3c6:	8f 93       	push	r24
     3c8:	16 96       	adiw	r26, 0x06	; 6
     3ca:	8c 91       	ld	r24, X
     3cc:	16 97       	sbiw	r26, 0x06	; 6
     3ce:	8f 93       	push	r24
     3d0:	15 96       	adiw	r26, 0x05	; 5
     3d2:	8c 91       	ld	r24, X
     3d4:	15 97       	sbiw	r26, 0x05	; 5
     3d6:	8f 93       	push	r24
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	8c 91       	ld	r24, X
     3dc:	14 97       	sbiw	r26, 0x04	; 4
     3de:	8f 93       	push	r24
     3e0:	13 96       	adiw	r26, 0x03	; 3
     3e2:	8c 91       	ld	r24, X
     3e4:	13 97       	sbiw	r26, 0x03	; 3
     3e6:	8f 93       	push	r24
     3e8:	12 96       	adiw	r26, 0x02	; 2
     3ea:	8c 91       	ld	r24, X
     3ec:	8f 93       	push	r24
     3ee:	eb e6       	ldi	r30, 0x6B	; 107
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	ff 93       	push	r31
     3f4:	ef 93       	push	r30
     3f6:	83 e7       	ldi	r24, 0x73	; 115
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	5f 92       	push	r5
     400:	4f 92       	push	r4
     402:	ea d5       	rcall	.+3028   	; 0xfd8 <sprintf>
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	a2 c0       	rjmp	.+324    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     410:	60 e8       	ldi	r22, 0x80	; 128
     412:	71 e0       	ldi	r23, 0x01	; 1
			}else if(!strcmp(pArray[2],"GETSENSOR")) {
     414:	81 2f       	mov	r24, r17
     416:	90 2f       	mov	r25, r16
     418:	78 d5       	rcall	.+2800   	; 0xf0a <strcmp>
     41a:	89 2b       	or	r24, r25
     41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	63 c0       	rjmp	.+198    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     420:	d7 01       	movw	r26, r14
     422:	16 96       	adiw	r26, 0x06	; 6
				if(pArray[3] != NULL) {
     424:	0d 90       	ld	r0, X+
     426:	bc 91       	ld	r27, X
     428:	a0 2d       	mov	r26, r0
     42a:	c5 51       	subi	r28, 0x15	; 21
     42c:	df 4f       	sbci	r29, 0xFF	; 255
     42e:	b9 83       	std	Y+1, r27	; 0x01
     430:	a8 83       	st	Y, r26
     432:	cb 5e       	subi	r28, 0xEB	; 235
     434:	d0 40       	sbci	r29, 0x00	; 0
     436:	10 97       	sbiw	r26, 0x00	; 0
     438:	51 f1       	breq	.+84     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     43a:	cd 01       	movw	r24, r26
     43c:	2c d5       	rcall	.+2648   	; 0xe96 <atoi>
					getSensorTime = atoi(pArray[3]);
     43e:	6c 01       	movw	r12, r24
     440:	c4 51       	subi	r28, 0x14	; 20
     442:	df 4f       	sbci	r29, 0xFF	; 255
     444:	b8 81       	ld	r27, Y
					sprintf(senddata,"[%s]%s@%s@%s",CLIENT_ID,pArray[1],pArray[2], pArray[3]);
     446:	cc 5e       	subi	r28, 0xEC	; 236
     448:	d0 40       	sbci	r29, 0x00	; 0
     44a:	bf 93       	push	r27
     44c:	c5 51       	subi	r28, 0x15	; 21
     44e:	df 4f       	sbci	r29, 0xFF	; 255
     450:	e8 81       	ld	r30, Y
     452:	cb 5e       	subi	r28, 0xEB	; 235
     454:	d0 40       	sbci	r29, 0x00	; 0
     456:	ef 93       	push	r30
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	d7 01       	movw	r26, r14
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	8c 91       	ld	r24, X
     462:	13 97       	sbiw	r26, 0x03	; 3
     464:	8f 93       	push	r24
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	8c 91       	ld	r24, X
     46a:	8f 93       	push	r24
     46c:	eb e6       	ldi	r30, 0x6B	; 107
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	ff 93       	push	r31
     472:	ef 93       	push	r30
     474:	83 e7       	ldi	r24, 0x73	; 115
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	5f 92       	push	r5
     47e:	4f 92       	push	r4
     480:	ab d5       	rcall	.+2902   	; 0xfd8 <sprintf>
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	22 c0       	rjmp	.+68     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     48e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <cdsValue>
     492:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <cdsValue+0x1>
				} else {
					getSensorTime = 0;
					sprintf(senddata,"[%s]%s@%s@%d",CLIENT_ID,pArray[1],pArray[2], cdsValue);
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	d7 01       	movw	r26, r14
     4a0:	13 96       	adiw	r26, 0x03	; 3
     4a2:	8c 91       	ld	r24, X
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	8f 93       	push	r24
     4a8:	12 96       	adiw	r26, 0x02	; 2
     4aa:	8c 91       	ld	r24, X
     4ac:	8f 93       	push	r24
     4ae:	eb e6       	ldi	r30, 0x6B	; 107
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	ff 93       	push	r31
     4b4:	ef 93       	push	r30
     4b6:	8a e8       	ldi	r24, 0x8A	; 138
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	5f 92       	push	r5
     4c0:	4f 92       	push	r4
     4c2:	8a d5       	rcall	.+2836   	; 0xfd8 <sprintf>
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	c1 2c       	mov	r12, r1
			}else if(!strcmp(pArray[2],"GETSENSOR")) {
				if(pArray[3] != NULL) {
					getSensorTime = atoi(pArray[3]);
					sprintf(senddata,"[%s]%s@%s@%s",CLIENT_ID,pArray[1],pArray[2], pArray[3]);
				} else {
					getSensorTime = 0;
     4d0:	d1 2c       	mov	r13, r1
     4d2:	d7 01       	movw	r26, r14
					sprintf(senddata,"[%s]%s@%s@%d",CLIENT_ID,pArray[1],pArray[2], cdsValue);
				}
				strcpy(getSensorId,pArray[1]);
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	6d 91       	ld	r22, X+
     4d8:	7c 91       	ld	r23, X
     4da:	13 97       	sbiw	r26, 0x03	; 3
     4dc:	ce 01       	movw	r24, r28
     4de:	8b 52       	subi	r24, 0x2B	; 43
     4e0:	9f 4f       	sbci	r25, 0xFF	; 255
     4e2:	1c d5       	rcall	.+2616   	; 0xf1c <strcpy>
     4e4:	37 c0       	rjmp	.+110    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     4e6:	67 e9       	ldi	r22, 0x97	; 151
     4e8:	71 e0       	ldi	r23, 0x01	; 1
			} else if(!strcmp(pArray[3], "CONDITION")) {
     4ea:	f7 01       	movw	r30, r14
     4ec:	86 81       	ldd	r24, Z+6	; 0x06
     4ee:	97 81       	ldd	r25, Z+7	; 0x07
     4f0:	0c d5       	rcall	.+2584   	; 0xf0a <strcmp>
     4f2:	89 2b       	or	r24, r25
     4f4:	79 f5       	brne	.+94     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     4f6:	f9 dd       	rcall	.-1038   	; 0xea <CDS_start>
     4f8:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <systic_sec>
				CDS_start();
     4fc:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <systic_sec+0x1>
				sprintf(senddata,"[%s]%s@%d@%d",pArray[2],pArray[3], cdsValue, systic_sec);
     500:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <systic_sec+0x2>
     504:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <systic_sec+0x3>
     508:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <cdsValue>
     50c:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <cdsValue+0x1>
     510:	bf 93       	push	r27
     512:	af 93       	push	r26
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	3f 93       	push	r19
     51a:	2f 93       	push	r18
     51c:	d7 01       	movw	r26, r14
     51e:	17 96       	adiw	r26, 0x07	; 7
     520:	8c 91       	ld	r24, X
     522:	17 97       	sbiw	r26, 0x07	; 7
     524:	8f 93       	push	r24
     526:	16 96       	adiw	r26, 0x06	; 6
     528:	8c 91       	ld	r24, X
     52a:	16 97       	sbiw	r26, 0x06	; 6
     52c:	8f 93       	push	r24
     52e:	15 96       	adiw	r26, 0x05	; 5
     530:	8c 91       	ld	r24, X
     532:	15 97       	sbiw	r26, 0x05	; 5
     534:	8f 93       	push	r24
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	8c 91       	ld	r24, X
     53a:	8f 93       	push	r24
     53c:	e1 ea       	ldi	r30, 0xA1	; 161
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	ff 93       	push	r31
     542:	ef 93       	push	r30
     544:	5f 92       	push	r5
     546:	4f 92       	push	r4
     548:	47 d5       	rcall	.+2702   	; 0xfd8 <sprintf>
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	d2 01       	movw	r26, r4
			}
			
			if(senddata[0] != '\0')	{
     556:	8c 91       	ld	r24, X
     558:	88 23       	and	r24, r24
     55a:	39 f0       	breq	.+14     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
				UART0_string(senddata);// UART0_string("\r");
     55c:	c2 01       	movw	r24, r4
     55e:	b6 d0       	rcall	.+364    	; 0x6cc <UART0_string>
     560:	c2 01       	movw	r24, r4
				if(ESP8266_Send(senddata) != ESP8266_RESPONSE_FINISHED)
     562:	a0 d3       	rcall	.+1856   	; 0xca4 <ESP8266_Send>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	09 f0       	breq	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	59 de       	rcall	.-846    	; 0x21c <Wifi_init>
     56a:	c1 14       	cp	r12, r1
				Wifi_init();
     56c:	d1 04       	cpc	r13, r1
     56e:	09 f4       	brne	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
			}
		}
		if(getSensorTime !=0 && !(systic_sec % getSensorTime) && (systic_sec != systic_sec_old)) {
     570:	c0 ce       	rjmp	.-640    	; 0x2f2 <main+0x8e>
     572:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <systic_sec>
     576:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <systic_sec+0x1>
     57a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <systic_sec+0x2>
     57e:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <systic_sec+0x3>
     582:	96 01       	movw	r18, r12
     584:	0d 2c       	mov	r0, r13
     586:	00 0c       	add	r0, r0
     588:	44 0b       	sbc	r20, r20
     58a:	55 0b       	sbc	r21, r21
     58c:	62 d4       	rcall	.+2244   	; 0xe52 <__udivmodsi4>
     58e:	67 2b       	or	r22, r23
     590:	68 2b       	or	r22, r24
     592:	69 2b       	or	r22, r25
     594:	09 f0       	breq	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     596:	ad ce       	rjmp	.-678    	; 0x2f2 <main+0x8e>
     598:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <systic_sec>
     59c:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <systic_sec+0x1>
     5a0:	a0 91 04 03 	lds	r26, 0x0304	; 0x800304 <systic_sec+0x2>
     5a4:	b0 91 05 03 	lds	r27, 0x0305	; 0x800305 <systic_sec+0x3>
     5a8:	88 16       	cp	r8, r24
     5aa:	99 06       	cpc	r9, r25
     5ac:	aa 06       	cpc	r10, r26
     5ae:	bb 06       	cpc	r11, r27
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b2:	9f ce       	rjmp	.-706    	; 0x2f2 <main+0x8e>
     5b4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <cdsValue>
     5b8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <cdsValue+0x1>
			sprintf(senddata,"[%s]%d@%d",getSensorId,getSensorTime,cdsValue);
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	df 92       	push	r13
     5c2:	cf 92       	push	r12
     5c4:	c6 51       	subi	r28, 0x16	; 22
     5c6:	df 4f       	sbci	r29, 0xFF	; 255
     5c8:	b8 81       	ld	r27, Y
     5ca:	ca 5e       	subi	r28, 0xEA	; 234
     5cc:	d0 40       	sbci	r29, 0x00	; 0
     5ce:	bf 93       	push	r27
     5d0:	c7 51       	subi	r28, 0x17	; 23
     5d2:	df 4f       	sbci	r29, 0xFF	; 255
     5d4:	e8 81       	ld	r30, Y
     5d6:	c9 5e       	subi	r28, 0xE9	; 233
     5d8:	d0 40       	sbci	r29, 0x00	; 0
     5da:	ef 93       	push	r30
     5dc:	8e ea       	ldi	r24, 0xAE	; 174
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	5f 92       	push	r5
     5e6:	4f 92       	push	r4
     5e8:	f7 d4       	rcall	.+2542   	; 0xfd8 <sprintf>
     5ea:	c2 01       	movw	r24, r4
     5ec:	6f d0       	rcall	.+222    	; 0x6cc <UART0_string>
			UART0_string(senddata);	UART0_string("\r\n");
     5ee:	89 e5       	ldi	r24, 0x59	; 89
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	6c d0       	rcall	.+216    	; 0x6cc <UART0_string>
     5f4:	c2 01       	movw	r24, r4
     5f6:	56 d3       	rcall	.+1708   	; 0xca4 <ESP8266_Send>
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
			ESP8266_Send(senddata);
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	77 ce       	rjmp	.-786    	; 0x2f2 <main+0x8e>

00000604 <UART0_init>:
char rx0data[BUFSIZE];
char rx1data[BUFSIZE];

void UART0_init(void)
{
	UCSR0B |= _BV(RXEN0);		// 송수신 가능
     604:	54 9a       	sbi	0x0a, 4	; 10
	UCSR0B |= _BV(TXEN0);
     606:	53 9a       	sbi	0x0a, 3	; 10
	UCSR0B |= _BV(RXCIE0);	//RX Complete Interrupt Enable
     608:	57 9a       	sbi	0x0a, 7	; 10
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
//	UCSR0C |= 0x06;
	UCSR0C |= _BV(UCSZ01); // 1 << 1
     60a:	e5 e9       	ldi	r30, 0x95	; 149
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	84 60       	ori	r24, 0x04	; 4
     612:	80 83       	st	Z, r24
	UCSR0C |= _BV(UCSZ00); // 1 << 2	
     614:	80 81       	ld	r24, Z
     616:	82 60       	ori	r24, 0x02	; 2
     618:	80 83       	st	Z, r24
	UBRR0H = 0;			// 115200 보율로 설정
     61a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 8;
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	89 b9       	out	0x09, r24	; 9
     622:	08 95       	ret

00000624 <UART1_init>:
}
void UART1_init(void)
{
	UCSR1B |= _BV(RXEN1);		// 송수신 가능
     624:	ea e9       	ldi	r30, 0x9A	; 154
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	80 61       	ori	r24, 0x10	; 16
     62c:	80 83       	st	Z, r24
	UCSR1B |= _BV(TXEN1);
     62e:	80 81       	ld	r24, Z
     630:	88 60       	ori	r24, 0x08	; 8
     632:	80 83       	st	Z, r24
	UCSR1B |= _BV(RXCIE1);	//RX Complete Interrupt Enable
     634:	80 81       	ld	r24, Z
     636:	80 68       	ori	r24, 0x80	; 128
     638:	80 83       	st	Z, r24
	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	//	UCSR0C |= 0x06;
	UCSR1C |= _BV(UCSZ11); // 1 << 1
     63a:	ed e9       	ldi	r30, 0x9D	; 157
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 83       	st	Z, r24
	UCSR1C |= _BV(UCSZ10); // 1 << 2
     644:	80 81       	ld	r24, Z
     646:	82 60       	ori	r24, 0x02	; 2
     648:	80 83       	st	Z, r24
	UBRR1H = 0;			// 115200 보율로 설정
     64a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8;
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     654:	08 95       	ret

00000656 <__vector_18>:
}
ISR(USART0_RX_vect)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	2f 93       	push	r18
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
	static int i=0;
	rx0data[i] = UDR0;
     66e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <i.1616>
     672:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <i.1616+0x1>
     676:	2c b1       	in	r18, 0x0c	; 12
     678:	fc 01       	movw	r30, r24
     67a:	e6 5f       	subi	r30, 0xF6	; 246
     67c:	fc 4f       	sbci	r31, 0xFC	; 252
     67e:	20 83       	st	Z, r18
	if(rx0data[i] == '\r')
     680:	2d 30       	cpi	r18, 0x0D	; 13
     682:	79 f4       	brne	.+30     	; 0x6a2 <__vector_18+0x4c>
	{
		rx0data[i]='\0';
     684:	fc 01       	movw	r30, r24
     686:	e6 5f       	subi	r30, 0xF6	; 246
     688:	fc 4f       	sbci	r31, 0xFC	; 252
     68a:	10 82       	st	Z, r1
		rx0flag = 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <rx0flag+0x1>
     694:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <rx0flag>
		i=0;
     698:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <i.1616+0x1>
     69c:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <i.1616>
     6a0:	05 c0       	rjmp	.+10     	; 0x6ac <__vector_18+0x56>
	}
	else
		i++;
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <i.1616+0x1>
     6a8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <i.1616>
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	9f 91       	pop	r25
     6b2:	8f 91       	pop	r24
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <UART0_transmit>:
	}
}
*/
void UART0_transmit(char data)
{
	while( !(UCSR0A & (1 << UDRE0)) );	// 송신 가능 대기
     6c4:	5d 9b       	sbis	0x0b, 5	; 11
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <UART0_transmit>
	UDR0 = data;				// 데이터 전송
     6c8:	8c b9       	out	0x0c, r24	; 12
     6ca:	08 95       	ret

000006cc <UART0_string>:
}
void UART0_string(char * str)
{
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
	while(*str != 0)
     6d2:	88 81       	ld	r24, Y
     6d4:	88 23       	and	r24, r24
     6d6:	29 f0       	breq	.+10     	; 0x6e2 <UART0_string+0x16>
     6d8:	21 96       	adiw	r28, 0x01	; 1
	{
		UART0_transmit(*str);
     6da:	f4 df       	rcall	.-24     	; 0x6c4 <UART0_transmit>
	while( !(UCSR0A & (1 << UDRE0)) );	// 송신 가능 대기
	UDR0 = data;				// 데이터 전송
}
void UART0_string(char * str)
{
	while(*str != 0)
     6dc:	89 91       	ld	r24, Y+
     6de:	81 11       	cpse	r24, r1
     6e0:	fc cf       	rjmp	.-8      	; 0x6da <UART0_string+0xe>
	{
		UART0_transmit(*str);
		str++;
	}
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <UART1_transmit>:
void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
     6e8:	eb e9       	ldi	r30, 0x9B	; 155
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	90 81       	ld	r25, Z
     6ee:	95 ff       	sbrs	r25, 5
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <UART1_transmit+0x4>
	UDR1 = data;				// 데이터 전송
     6f2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     6f6:	08 95       	ret

000006f8 <UART1_string>:
}
void UART1_string(char * str)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
	while(*str != 0)
     6fe:	88 81       	ld	r24, Y
     700:	88 23       	and	r24, r24
     702:	29 f0       	breq	.+10     	; 0x70e <UART1_string+0x16>
     704:	21 96       	adiw	r28, 0x01	; 1
	{
		UART1_transmit(*str);
     706:	f0 df       	rcall	.-32     	; 0x6e8 <UART1_transmit>
	while( !(UCSR1A & (1 << UDRE1)) );	// 송신 가능 대기
	UDR1 = data;				// 데이터 전송
}
void UART1_string(char * str)
{
	while(*str != 0)
     708:	89 91       	ld	r24, Y+
     70a:	81 11       	cpse	r24, r1
     70c:	fc cf       	rjmp	.-8      	; 0x706 <UART1_string+0xe>
	{
		UART1_transmit(*str);
		str++;
	}
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <Read_Response>:
     714:	2f 92       	push	r2
     716:	3f 92       	push	r3
     718:	4f 92       	push	r4
     71a:	5f 92       	push	r5
     71c:	6f 92       	push	r6
     71e:	7f 92       	push	r7
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	2c 97       	sbiw	r28, 0x0c	; 12
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	1c 01       	movw	r2, r24
     74a:	2d b7       	in	r18, 0x3d	; 61
     74c:	3e b7       	in	r19, 0x3e	; 62
     74e:	38 87       	std	Y+8, r19	; 0x08
     750:	2f 83       	std	Y+7, r18	; 0x07
     752:	fc 01       	movw	r30, r24
     754:	01 90       	ld	r0, Z+
     756:	00 20       	and	r0, r0
     758:	e9 f7       	brne	.-6      	; 0x754 <Read_Response+0x40>
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	e8 1b       	sub	r30, r24
     75e:	f9 0b       	sbc	r31, r25
     760:	cf 01       	movw	r24, r30
     762:	99 27       	eor	r25, r25
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	9e 83       	std	Y+6, r25	; 0x06
     76c:	8d 83       	std	Y+5, r24	; 0x05
     76e:	ed b7       	in	r30, 0x3d	; 61
     770:	fe b7       	in	r31, 0x3e	; 62
     772:	29 81       	ldd	r18, Y+1	; 0x01
     774:	3a 81       	ldd	r19, Y+2	; 0x02
     776:	e2 1b       	sub	r30, r18
     778:	f3 0b       	sbc	r31, r19
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	fe bf       	out	0x3e, r31	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	ed bf       	out	0x3d, r30	; 61
     784:	0d b7       	in	r16, 0x3d	; 61
     786:	1e b7       	in	r17, 0x3e	; 62
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	81 2c       	mov	r8, r1
     78e:	91 2c       	mov	r9, r1
     790:	54 01       	movw	r10, r8
     792:	c8 01       	movw	r24, r16
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	9a 87       	std	Y+10, r25	; 0x0a
     798:	89 87       	std	Y+9, r24	; 0x09
     79a:	ed 81       	ldd	r30, Y+5	; 0x05
     79c:	fe 81       	ldd	r31, Y+6	; 0x06
     79e:	e0 0f       	add	r30, r16
     7a0:	f1 1f       	adc	r31, r17
     7a2:	fc 87       	std	Y+12, r31	; 0x0c
     7a4:	eb 87       	std	Y+11, r30	; 0x0b
     7a6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TimeOut>
     7aa:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <TimeOut+0x1>
     7ae:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <TimeOut+0x2>
     7b2:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <TimeOut+0x3>
     7b6:	80 5f       	subi	r24, 0xF0	; 240
     7b8:	98 4d       	sbci	r25, 0xD8	; 216
     7ba:	af 4f       	sbci	r26, 0xFF	; 255
     7bc:	bf 4f       	sbci	r27, 0xFF	; 255
     7be:	88 16       	cp	r8, r24
     7c0:	99 06       	cpc	r9, r25
     7c2:	aa 06       	cpc	r10, r26
     7c4:	bb 06       	cpc	r11, r27
     7c6:	50 f0       	brcs	.+20     	; 0x7dc <Read_Response+0xc8>
     7c8:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <TimeOut>
     7cc:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <TimeOut+0x1>
     7d0:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <TimeOut+0x2>
     7d4:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <TimeOut+0x3>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	5e c0       	rjmp	.+188    	; 0x898 <Read_Response+0x184>
     7dc:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Response_Status>
     7e0:	84 30       	cpi	r24, 0x04	; 4
     7e2:	11 f4       	brne	.+4      	; 0x7e8 <Read_Response+0xd4>
     7e4:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <Response_Status>
     7e8:	e6 ed       	ldi	r30, 0xD6	; 214
     7ea:	f3 e0       	ldi	r31, 0x03	; 3
     7ec:	01 90       	ld	r0, Z+
     7ee:	00 20       	and	r0, r0
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <Read_Response+0xd8>
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	cf 01       	movw	r24, r30
     7f6:	86 5d       	subi	r24, 0xD6	; 214
     7f8:	93 40       	sbci	r25, 0x03	; 3
     7fa:	6c 01       	movw	r12, r24
     7fc:	e1 2c       	mov	r14, r1
     7fe:	f1 2c       	mov	r15, r1
     800:	c1 14       	cp	r12, r1
     802:	d1 04       	cpc	r13, r1
     804:	e1 04       	cpc	r14, r1
     806:	f1 04       	cpc	r15, r1
     808:	09 f4       	brne	.+2      	; 0x80c <Read_Response+0xf8>
     80a:	6e c0       	rjmp	.+220    	; 0x8e8 <Read_Response+0x1d4>
     80c:	8f e9       	ldi	r24, 0x9F	; 159
     80e:	9f e0       	ldi	r25, 0x0F	; 15
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <Read_Response+0xfc>
     814:	00 c0       	rjmp	.+0      	; 0x816 <Read_Response+0x102>
     816:	00 00       	nop
     818:	9f ef       	ldi	r25, 0xFF	; 255
     81a:	89 1a       	sub	r8, r25
     81c:	99 0a       	sbc	r9, r25
     81e:	a9 0a       	sbc	r10, r25
     820:	b9 0a       	sbc	r11, r25
     822:	e6 ed       	ldi	r30, 0xD6	; 214
     824:	f3 e0       	ldi	r31, 0x03	; 3
     826:	01 90       	ld	r0, Z+
     828:	00 20       	and	r0, r0
     82a:	e9 f7       	brne	.-6      	; 0x826 <Read_Response+0x112>
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	cf 01       	movw	r24, r30
     830:	86 5d       	subi	r24, 0xD6	; 214
     832:	93 40       	sbci	r25, 0x03	; 3
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	c8 16       	cp	r12, r24
     83a:	d9 06       	cpc	r13, r25
     83c:	ea 06       	cpc	r14, r26
     83e:	fb 06       	cpc	r15, r27
     840:	09 f0       	breq	.+2      	; 0x844 <Read_Response+0x130>
     842:	52 c0       	rjmp	.+164    	; 0x8e8 <Read_Response+0x1d4>
     844:	e6 ed       	ldi	r30, 0xD6	; 214
     846:	f3 e0       	ldi	r31, 0x03	; 3
     848:	fc 83       	std	Y+4, r31	; 0x04
     84a:	eb 83       	std	Y+3, r30	; 0x03
     84c:	41 2c       	mov	r4, r1
     84e:	51 2c       	mov	r5, r1
     850:	32 01       	movw	r6, r4
     852:	4d 81       	ldd	r20, Y+5	; 0x05
     854:	5e 81       	ldd	r21, Y+6	; 0x06
     856:	69 85       	ldd	r22, Y+9	; 0x09
     858:	7a 85       	ldd	r23, Y+10	; 0x0a
     85a:	c8 01       	movw	r24, r16
     85c:	45 d3       	rcall	.+1674   	; 0xee8 <memmove>
     85e:	eb 81       	ldd	r30, Y+3	; 0x03
     860:	fc 81       	ldd	r31, Y+4	; 0x04
     862:	81 91       	ld	r24, Z+
     864:	fc 83       	std	Y+4, r31	; 0x04
     866:	eb 83       	std	Y+3, r30	; 0x03
     868:	eb 85       	ldd	r30, Y+11	; 0x0b
     86a:	fc 85       	ldd	r31, Y+12	; 0x0c
     86c:	80 83       	st	Z, r24
     86e:	49 81       	ldd	r20, Y+1	; 0x01
     870:	5a 81       	ldd	r21, Y+2	; 0x02
     872:	b1 01       	movw	r22, r2
     874:	c8 01       	movw	r24, r16
     876:	59 d3       	rcall	.+1714   	; 0xf2a <strncmp>
     878:	ff ef       	ldi	r31, 0xFF	; 255
     87a:	4f 1a       	sub	r4, r31
     87c:	5f 0a       	sbc	r5, r31
     87e:	6f 0a       	sbc	r6, r31
     880:	7f 0a       	sbc	r7, r31
     882:	89 2b       	or	r24, r25
     884:	59 f5       	brne	.+86     	; 0x8dc <Read_Response+0x1c8>
     886:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <TimeOut>
     88a:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <TimeOut+0x1>
     88e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <TimeOut+0x2>
     892:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <TimeOut+0x3>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <Response_Status>
     89c:	ef 81       	ldd	r30, Y+7	; 0x07
     89e:	f8 85       	ldd	r31, Y+8	; 0x08
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	fe bf       	out	0x3e, r31	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	ed bf       	out	0x3d, r30	; 61
     8aa:	2c 96       	adiw	r28, 0x0c	; 12
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	8f 90       	pop	r8
     8ce:	7f 90       	pop	r7
     8d0:	6f 90       	pop	r6
     8d2:	5f 90       	pop	r5
     8d4:	4f 90       	pop	r4
     8d6:	3f 90       	pop	r3
     8d8:	2f 90       	pop	r2
     8da:	08 95       	ret
     8dc:	4c 14       	cp	r4, r12
     8de:	5d 04       	cpc	r5, r13
     8e0:	6e 04       	cpc	r6, r14
     8e2:	7f 04       	cpc	r7, r15
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <Read_Response+0x1d4>
     8e6:	b5 cf       	rjmp	.-150    	; 0x852 <Read_Response+0x13e>
     8e8:	8f e9       	ldi	r24, 0x9F	; 159
     8ea:	9f e0       	ldi	r25, 0x0F	; 15
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <Read_Response+0x1d8>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <Read_Response+0x1de>
     8f2:	00 00       	nop
     8f4:	9f ef       	ldi	r25, 0xFF	; 255
     8f6:	89 1a       	sub	r8, r25
     8f8:	99 0a       	sbc	r9, r25
     8fa:	a9 0a       	sbc	r10, r25
     8fc:	b9 0a       	sbc	r11, r25
     8fe:	53 cf       	rjmp	.-346    	; 0x7a6 <Read_Response+0x92>

00000900 <ESP8266_Clear>:
     900:	80 ea       	ldi	r24, 0xA0	; 160
     902:	e6 ed       	ldi	r30, 0xD6	; 214
     904:	f3 e0       	ldi	r31, 0x03	; 3
     906:	df 01       	movw	r26, r30
     908:	1d 92       	st	X+, r1
     90a:	8a 95       	dec	r24
     90c:	e9 f7       	brne	.-6      	; 0x908 <ESP8266_Clear+0x8>
     90e:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Counter+0x1>
     912:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <Counter>
     916:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <pointer+0x1>
     91a:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <pointer>
     91e:	08 95       	ret

00000920 <Start_Read_Response>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <Response_Status>
     92c:	ce 01       	movw	r24, r28
     92e:	f2 de       	rcall	.-540    	; 0x714 <Read_Response>
     930:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Response_Status>
     934:	88 23       	and	r24, r24
     936:	d1 f3       	breq	.-12     	; 0x92c <Start_Read_Response+0xc>
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <WaitForExpectedResponse>:
     93e:	f0 df       	rcall	.-32     	; 0x920 <Start_Read_Response>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <Response_Status>
     946:	92 30       	cpi	r25, 0x02	; 2
     948:	09 f4       	brne	.+2      	; 0x94c <WaitForExpectedResponse+0xe>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	08 95       	ret

0000094e <SendATandExpectResponse>:
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	8c 01       	movw	r16, r24
     958:	eb 01       	movw	r28, r22
     95a:	d2 df       	rcall	.-92     	; 0x900 <ESP8266_Clear>
     95c:	c8 01       	movw	r24, r16
     95e:	cc de       	rcall	.-616    	; 0x6f8 <UART1_string>
     960:	89 e5       	ldi	r24, 0x59	; 89
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	c9 de       	rcall	.-622    	; 0x6f8 <UART1_string>
     966:	ce 01       	movw	r24, r28
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	e6 cf       	rjmp	.-52     	; 0x93e <WaitForExpectedResponse>

00000972 <ESP8266_ApplicationMode>:
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	64 97       	sbiw	r28, 0x14	; 20
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	8e 01       	movw	r16, r28
     98c:	0f 5f       	subi	r16, 0xFF	; 255
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	94 e1       	ldi	r25, 0x14	; 20
     992:	f8 01       	movw	r30, r16
     994:	11 92       	st	Z+, r1
     996:	9a 95       	dec	r25
     998:	e9 f7       	brne	.-6      	; 0x994 <ESP8266_ApplicationMode+0x22>
     99a:	1f 92       	push	r1
     99c:	8f 93       	push	r24
     99e:	8f eb       	ldi	r24, 0xBF	; 191
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	1f 93       	push	r17
     9a8:	0f 93       	push	r16
     9aa:	16 d3       	rcall	.+1580   	; 0xfd8 <sprintf>
     9ac:	1c 8a       	std	Y+20, r1	; 0x14
     9ae:	68 eb       	ldi	r22, 0xB8	; 184
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	c8 01       	movw	r24, r16
     9b4:	cc df       	rcall	.-104    	; 0x94e <SendATandExpectResponse>
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	64 96       	adiw	r28, 0x14	; 20
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	08 95       	ret

000009d8 <ESP8266_ConnectionMode>:
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	64 97       	sbiw	r28, 0x14	; 20
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	8e 01       	movw	r16, r28
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	94 e1       	ldi	r25, 0x14	; 20
     9f8:	f8 01       	movw	r30, r16
     9fa:	11 92       	st	Z+, r1
     9fc:	9a 95       	dec	r25
     9fe:	e9 f7       	brne	.-6      	; 0x9fa <ESP8266_ConnectionMode+0x22>
     a00:	1f 92       	push	r1
     a02:	8f 93       	push	r24
     a04:	8d ec       	ldi	r24, 0xCD	; 205
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	1f 93       	push	r17
     a0e:	0f 93       	push	r16
     a10:	e3 d2       	rcall	.+1478   	; 0xfd8 <sprintf>
     a12:	1c 8a       	std	Y+20, r1	; 0x14
     a14:	68 eb       	ldi	r22, 0xB8	; 184
     a16:	71 e0       	ldi	r23, 0x01	; 1
     a18:	c8 01       	movw	r24, r16
     a1a:	99 df       	rcall	.-206    	; 0x94e <SendATandExpectResponse>
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	64 96       	adiw	r28, 0x14	; 20
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <ESP8266_Begin>:
     a3e:	cf 93       	push	r28
     a40:	c5 e0       	ldi	r28, 0x05	; 5
     a42:	68 eb       	ldi	r22, 0xB8	; 184
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	8a ed       	ldi	r24, 0xDA	; 218
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	81 df       	rcall	.-254    	; 0x94e <SendATandExpectResponse>
     a4c:	88 23       	and	r24, r24
     a4e:	11 f0       	breq	.+4      	; 0xa54 <ESP8266_Begin+0x16>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	09 c0       	rjmp	.+18     	; 0xa66 <ESP8266_Begin+0x28>
     a54:	68 eb       	ldi	r22, 0xB8	; 184
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	8f ed       	ldi	r24, 0xDF	; 223
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	78 df       	rcall	.-272    	; 0x94e <SendATandExpectResponse>
     a5e:	81 11       	cpse	r24, r1
     a60:	f7 cf       	rjmp	.-18     	; 0xa50 <ESP8266_Begin+0x12>
     a62:	c1 50       	subi	r28, 0x01	; 1
     a64:	71 f7       	brne	.-36     	; 0xa42 <ESP8266_Begin+0x4>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <ESP8266_WIFIMode>:
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	64 97       	sbiw	r28, 0x14	; 20
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	8e 01       	movw	r16, r28
     a84:	0f 5f       	subi	r16, 0xFF	; 255
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
     a88:	94 e1       	ldi	r25, 0x14	; 20
     a8a:	f8 01       	movw	r30, r16
     a8c:	11 92       	st	Z+, r1
     a8e:	9a 95       	dec	r25
     a90:	e9 f7       	brne	.-6      	; 0xa8c <ESP8266_WIFIMode+0x22>
     a92:	1f 92       	push	r1
     a94:	8f 93       	push	r24
     a96:	80 ef       	ldi	r24, 0xF0	; 240
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	1f 93       	push	r17
     aa0:	0f 93       	push	r16
     aa2:	9a d2       	rcall	.+1332   	; 0xfd8 <sprintf>
     aa4:	1c 8a       	std	Y+20, r1	; 0x14
     aa6:	68 eb       	ldi	r22, 0xB8	; 184
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	c8 01       	movw	r24, r16
     aac:	50 df       	rcall	.-352    	; 0x94e <SendATandExpectResponse>
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	64 96       	adiw	r28, 0x14	; 20
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <ESP8266_JoinAccessPoint>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	ec 97       	sbiw	r28, 0x3c	; 60
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	8e 01       	movw	r16, r28
     aea:	0f 5f       	subi	r16, 0xFF	; 255
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
     aee:	2c e3       	ldi	r18, 0x3C	; 60
     af0:	f8 01       	movw	r30, r16
     af2:	11 92       	st	Z+, r1
     af4:	2a 95       	dec	r18
     af6:	e9 f7       	brne	.-6      	; 0xaf2 <ESP8266_JoinAccessPoint+0x22>
     af8:	7f 93       	push	r23
     afa:	6f 93       	push	r22
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	8d ef       	ldi	r24, 0xFD	; 253
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	1f 93       	push	r17
     b0a:	0f 93       	push	r16
     b0c:	65 d2       	rcall	.+1226   	; 0xfd8 <sprintf>
     b0e:	1c ae       	std	Y+60, r1	; 0x3c
     b10:	60 e1       	ldi	r22, 0x10	; 16
     b12:	72 e0       	ldi	r23, 0x02	; 2
     b14:	c8 01       	movw	r24, r16
     b16:	1b df       	rcall	.-458    	; 0x94e <SendATandExpectResponse>
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	81 11       	cpse	r24, r1
     b24:	1e c0       	rjmp	.+60     	; 0xb62 <ESP8266_JoinAccessPoint+0x92>
     b26:	63 e2       	ldi	r22, 0x23	; 35
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	86 ed       	ldi	r24, 0xD6	; 214
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0b d2       	rcall	.+1046   	; 0xf46 <strstr>
     b30:	89 2b       	or	r24, r25
     b32:	c9 f4       	brne	.+50     	; 0xb66 <ESP8266_JoinAccessPoint+0x96>
     b34:	6c e2       	ldi	r22, 0x2C	; 44
     b36:	72 e0       	ldi	r23, 0x02	; 2
     b38:	86 ed       	ldi	r24, 0xD6	; 214
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	04 d2       	rcall	.+1032   	; 0xf46 <strstr>
     b3e:	89 2b       	or	r24, r25
     b40:	a1 f4       	brne	.+40     	; 0xb6a <ESP8266_JoinAccessPoint+0x9a>
     b42:	65 e3       	ldi	r22, 0x35	; 53
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	86 ed       	ldi	r24, 0xD6	; 214
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	fd d1       	rcall	.+1018   	; 0xf46 <strstr>
     b4c:	89 2b       	or	r24, r25
     b4e:	79 f4       	brne	.+30     	; 0xb6e <ESP8266_JoinAccessPoint+0x9e>
     b50:	6e e3       	ldi	r22, 0x3E	; 62
     b52:	72 e0       	ldi	r23, 0x02	; 2
     b54:	86 ed       	ldi	r24, 0xD6	; 214
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	f6 d1       	rcall	.+1004   	; 0xf46 <strstr>
     b5a:	89 2b       	or	r24, r25
     b5c:	51 f4       	brne	.+20     	; 0xb72 <ESP8266_JoinAccessPoint+0xa2>
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <ESP8266_JoinAccessPoint+0xa4>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <ESP8266_JoinAccessPoint+0xa4>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <ESP8266_JoinAccessPoint+0xa4>
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <ESP8266_JoinAccessPoint+0xa4>
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <ESP8266_JoinAccessPoint+0xa4>
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	ec 96       	adiw	r28, 0x3c	; 60
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <ESP8266_connected>:
     b8a:	68 eb       	ldi	r22, 0xB8	; 184
     b8c:	71 e0       	ldi	r23, 0x01	; 1
     b8e:	87 e4       	ldi	r24, 0x47	; 71
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	dd de       	rcall	.-582    	; 0x94e <SendATandExpectResponse>
     b94:	64 e5       	ldi	r22, 0x54	; 84
     b96:	72 e0       	ldi	r23, 0x02	; 2
     b98:	86 ed       	ldi	r24, 0xD6	; 214
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	d4 d1       	rcall	.+936    	; 0xf46 <strstr>
     b9e:	89 2b       	or	r24, r25
     ba0:	b9 f4       	brne	.+46     	; 0xbd0 <ESP8266_connected+0x46>
     ba2:	6d e5       	ldi	r22, 0x5D	; 93
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	86 ed       	ldi	r24, 0xD6	; 214
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	cd d1       	rcall	.+922    	; 0xf46 <strstr>
     bac:	89 2b       	or	r24, r25
     bae:	91 f4       	brne	.+36     	; 0xbd4 <ESP8266_connected+0x4a>
     bb0:	66 e6       	ldi	r22, 0x66	; 102
     bb2:	72 e0       	ldi	r23, 0x02	; 2
     bb4:	86 ed       	ldi	r24, 0xD6	; 214
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	c6 d1       	rcall	.+908    	; 0xf46 <strstr>
     bba:	89 2b       	or	r24, r25
     bbc:	69 f4       	brne	.+26     	; 0xbd8 <ESP8266_connected+0x4e>
     bbe:	6f e6       	ldi	r22, 0x6F	; 111
     bc0:	72 e0       	ldi	r23, 0x02	; 2
     bc2:	86 ed       	ldi	r24, 0xD6	; 214
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	bf d1       	rcall	.+894    	; 0xf46 <strstr>
     bc8:	89 2b       	or	r24, r25
     bca:	41 f4       	brne	.+16     	; 0xbdc <ESP8266_connected+0x52>
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	08 95       	ret
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 95       	ret
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	08 95       	ret
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	08 95       	ret

00000be0 <ESP8266_Start>:
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	ec 97       	sbiw	r28, 0x3c	; 60
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	b8 2e       	mov	r11, r24
     c04:	f6 2e       	mov	r15, r22
     c06:	e7 2e       	mov	r14, r23
     c08:	d4 2e       	mov	r13, r20
     c0a:	c5 2e       	mov	r12, r21
     c0c:	8e 01       	movw	r16, r28
     c0e:	0f 5f       	subi	r16, 0xFF	; 255
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	8c e3       	ldi	r24, 0x3C	; 60
     c14:	f8 01       	movw	r30, r16
     c16:	11 92       	st	Z+, r1
     c18:	8a 95       	dec	r24
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <ESP8266_Start+0x36>
     c1c:	68 e7       	ldi	r22, 0x78	; 120
     c1e:	72 e0       	ldi	r23, 0x02	; 2
     c20:	81 e8       	ldi	r24, 0x81	; 129
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	94 de       	rcall	.-728    	; 0x94e <SendATandExpectResponse>
     c26:	88 23       	and	r24, r24
     c28:	61 f0       	breq	.+24     	; 0xc42 <ESP8266_Start+0x62>
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	8c e8       	ldi	r24, 0x8C	; 140
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	9f 93       	push	r25
     c38:	8f 93       	push	r24
     c3a:	1f 93       	push	r17
     c3c:	0f 93       	push	r16
     c3e:	cc d1       	rcall	.+920    	; 0xfd8 <sprintf>
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <ESP8266_Start+0x7c>
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	1f 92       	push	r1
     c4c:	bf 92       	push	r11
     c4e:	86 ea       	ldi	r24, 0xA6	; 166
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	9f 93       	push	r25
     c54:	8f 93       	push	r24
     c56:	1f 93       	push	r17
     c58:	0f 93       	push	r16
     c5a:	be d1       	rcall	.+892    	; 0xfd8 <sprintf>
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	65 ec       	ldi	r22, 0xC5	; 197
     c68:	72 e0       	ldi	r23, 0x02	; 2
     c6a:	c8 01       	movw	r24, r16
     c6c:	70 de       	rcall	.-800    	; 0x94e <SendATandExpectResponse>
     c6e:	81 11       	cpse	r24, r1
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <ESP8266_Start+0x9e>
     c72:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Response_Status>
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	21 f0       	breq	.+8      	; 0xc82 <ESP8266_Start+0xa2>
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <ESP8266_Start+0xa4>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <ESP8266_Start+0xa4>
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	ec 96       	adiw	r28, 0x3c	; 60
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	08 95       	ret

00000ca4 <ESP8266_Send>:
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	64 97       	sbiw	r28, 0x14	; 20
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	8c 01       	movw	r16, r24
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	7c 01       	movw	r14, r24
     cc8:	84 e1       	ldi	r24, 0x14	; 20
     cca:	f7 01       	movw	r30, r14
     ccc:	11 92       	st	Z+, r1
     cce:	8a 95       	dec	r24
     cd0:	e9 f7       	brne	.-6      	; 0xccc <ESP8266_Send+0x28>
     cd2:	f8 01       	movw	r30, r16
     cd4:	01 90       	ld	r0, Z+
     cd6:	00 20       	and	r0, r0
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <ESP8266_Send+0x30>
     cda:	cf 01       	movw	r24, r30
     cdc:	80 1b       	sub	r24, r16
     cde:	91 0b       	sbc	r25, r17
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	8f ec       	ldi	r24, 0xCF	; 207
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	ff 92       	push	r15
     cf0:	ef 92       	push	r14
     cf2:	72 d1       	rcall	.+740    	; 0xfd8 <sprintf>
     cf4:	1c 8a       	std	Y+20, r1	; 0x14
     cf6:	6d ed       	ldi	r22, 0xDD	; 221
     cf8:	72 e0       	ldi	r23, 0x02	; 2
     cfa:	c7 01       	movw	r24, r14
     cfc:	28 de       	rcall	.-944    	; 0x94e <SendATandExpectResponse>
     cfe:	65 ee       	ldi	r22, 0xE5	; 229
     d00:	72 e0       	ldi	r23, 0x02	; 2
     d02:	c8 01       	movw	r24, r16
     d04:	24 de       	rcall	.-952    	; 0x94e <SendATandExpectResponse>
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	81 11       	cpse	r24, r1
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <ESP8266_Send+0x7e>
     d16:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <Response_Status>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	21 f0       	breq	.+8      	; 0xd26 <ESP8266_Send+0x82>
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <ESP8266_Send+0x84>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <ESP8266_Send+0x84>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	64 96       	adiw	r28, 0x14	; 20
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	08 95       	ret

00000d42 <ESP8266_DataAvailable>:
     d42:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Counter>
     d46:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Counter+0x1>
     d4a:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <pointer>
     d4e:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <pointer+0x1>
     d52:	82 1b       	sub	r24, r18
     d54:	93 0b       	sbc	r25, r19
     d56:	08 95       	ret

00000d58 <ESP8266_DataRead>:
     d58:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <pointer>
     d5c:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <pointer+0x1>
     d60:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Counter>
     d64:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Counter+0x1>
     d68:	28 17       	cp	r18, r24
     d6a:	39 07       	cpc	r19, r25
     d6c:	84 f4       	brge	.+32     	; 0xd8e <ESP8266_DataRead+0x36>
     d6e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <pointer>
     d72:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <pointer+0x1>
     d76:	9c 01       	movw	r18, r24
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	30 93 fb 02 	sts	0x02FB, r19	; 0x8002fb <pointer+0x1>
     d80:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <pointer>
     d84:	fc 01       	movw	r30, r24
     d86:	ea 52       	subi	r30, 0x2A	; 42
     d88:	fc 4f       	sbci	r31, 0xFC	; 252
     d8a:	80 81       	ld	r24, Z
     d8c:	08 95       	ret
     d8e:	b8 dd       	rcall	.-1168   	; 0x900 <ESP8266_Clear>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret

00000d94 <Read_Data>:
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	8c 01       	movw	r16, r24
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	80 e7       	ldi	r24, 0x70	; 112
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <Read_Data+0x14>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <Read_Data+0x1e>
     db2:	00 00       	nop
     db4:	e8 01       	movw	r28, r16
     db6:	7e 01       	movw	r14, r28
     db8:	e0 1a       	sub	r14, r16
     dba:	f1 0a       	sbc	r15, r17
     dbc:	c2 df       	rcall	.-124    	; 0xd42 <ESP8266_DataAvailable>
     dbe:	18 16       	cp	r1, r24
     dc0:	19 06       	cpc	r1, r25
     dc2:	1c f4       	brge	.+6      	; 0xdca <Read_Data+0x36>
     dc4:	c9 df       	rcall	.-110    	; 0xd58 <ESP8266_DataRead>
     dc6:	89 93       	st	Y+, r24
     dc8:	f6 cf       	rjmp	.-20     	; 0xdb6 <Read_Data+0x22>
     dca:	c7 01       	movw	r24, r14
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	08 95       	ret

00000dda <__vector_30>:
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	2f 93       	push	r18
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	2f b7       	in	r18, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <Counter>
     dfa:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <Counter+0x1>
     dfe:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     e02:	ea 52       	subi	r30, 0x2A	; 42
     e04:	fc 4f       	sbci	r31, 0xFC	; 252
     e06:	80 83       	st	Z, r24
     e08:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Counter>
     e0c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Counter+0x1>
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <Counter+0x1>
     e16:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <Counter>
     e1a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Counter>
     e1e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <Counter+0x1>
     e22:	80 3a       	cpi	r24, 0xA0	; 160
     e24:	91 05       	cpc	r25, r1
     e26:	41 f4       	brne	.+16     	; 0xe38 <__vector_30+0x5e>
     e28:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <Counter+0x1>
     e2c:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <Counter>
     e30:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <pointer+0x1>
     e34:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <pointer>
     e38:	2f bf       	out	0x3f, r18	; 63
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__udivmodsi4>:
     e52:	a1 e2       	ldi	r26, 0x21	; 33
     e54:	1a 2e       	mov	r1, r26
     e56:	aa 1b       	sub	r26, r26
     e58:	bb 1b       	sub	r27, r27
     e5a:	fd 01       	movw	r30, r26
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__udivmodsi4_ep>

00000e5e <__udivmodsi4_loop>:
     e5e:	aa 1f       	adc	r26, r26
     e60:	bb 1f       	adc	r27, r27
     e62:	ee 1f       	adc	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	a2 17       	cp	r26, r18
     e68:	b3 07       	cpc	r27, r19
     e6a:	e4 07       	cpc	r30, r20
     e6c:	f5 07       	cpc	r31, r21
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__udivmodsi4_ep>
     e70:	a2 1b       	sub	r26, r18
     e72:	b3 0b       	sbc	r27, r19
     e74:	e4 0b       	sbc	r30, r20
     e76:	f5 0b       	sbc	r31, r21

00000e78 <__udivmodsi4_ep>:
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	1a 94       	dec	r1
     e82:	69 f7       	brne	.-38     	; 0xe5e <__udivmodsi4_loop>
     e84:	60 95       	com	r22
     e86:	70 95       	com	r23
     e88:	80 95       	com	r24
     e8a:	90 95       	com	r25
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	bd 01       	movw	r22, r26
     e92:	cf 01       	movw	r24, r30
     e94:	08 95       	ret

00000e96 <atoi>:
     e96:	fc 01       	movw	r30, r24
     e98:	88 27       	eor	r24, r24
     e9a:	99 27       	eor	r25, r25
     e9c:	e8 94       	clt
     e9e:	21 91       	ld	r18, Z+
     ea0:	20 32       	cpi	r18, 0x20	; 32
     ea2:	e9 f3       	breq	.-6      	; 0xe9e <atoi+0x8>
     ea4:	29 30       	cpi	r18, 0x09	; 9
     ea6:	10 f0       	brcs	.+4      	; 0xeac <atoi+0x16>
     ea8:	2e 30       	cpi	r18, 0x0E	; 14
     eaa:	c8 f3       	brcs	.-14     	; 0xe9e <atoi+0x8>
     eac:	2b 32       	cpi	r18, 0x2B	; 43
     eae:	39 f0       	breq	.+14     	; 0xebe <atoi+0x28>
     eb0:	2d 32       	cpi	r18, 0x2D	; 45
     eb2:	31 f4       	brne	.+12     	; 0xec0 <atoi+0x2a>
     eb4:	68 94       	set
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <atoi+0x28>
     eb8:	87 d0       	rcall	.+270    	; 0xfc8 <__mulhi_const_10>
     eba:	82 0f       	add	r24, r18
     ebc:	91 1d       	adc	r25, r1
     ebe:	21 91       	ld	r18, Z+
     ec0:	20 53       	subi	r18, 0x30	; 48
     ec2:	2a 30       	cpi	r18, 0x0A	; 10
     ec4:	c8 f3       	brcs	.-14     	; 0xeb8 <atoi+0x22>
     ec6:	1e f4       	brtc	.+6      	; 0xece <atoi+0x38>
     ec8:	90 95       	com	r25
     eca:	81 95       	neg	r24
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	08 95       	ret

00000ed0 <strtok>:
     ed0:	42 ef       	ldi	r20, 0xF2	; 242
     ed2:	52 e0       	ldi	r21, 0x02	; 2
     ed4:	52 c0       	rjmp	.+164    	; 0xf7a <strtok_r>

00000ed6 <memcpy>:
     ed6:	fb 01       	movw	r30, r22
     ed8:	dc 01       	movw	r26, r24
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <memcpy+0xa>
     edc:	01 90       	ld	r0, Z+
     ede:	0d 92       	st	X+, r0
     ee0:	41 50       	subi	r20, 0x01	; 1
     ee2:	50 40       	sbci	r21, 0x00	; 0
     ee4:	d8 f7       	brcc	.-10     	; 0xedc <memcpy+0x6>
     ee6:	08 95       	ret

00000ee8 <memmove>:
     ee8:	68 17       	cp	r22, r24
     eea:	79 07       	cpc	r23, r25
     eec:	68 f4       	brcc	.+26     	; 0xf08 <memmove+0x20>
     eee:	fb 01       	movw	r30, r22
     ef0:	dc 01       	movw	r26, r24
     ef2:	e4 0f       	add	r30, r20
     ef4:	f5 1f       	adc	r31, r21
     ef6:	a4 0f       	add	r26, r20
     ef8:	b5 1f       	adc	r27, r21
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <memmove+0x18>
     efc:	02 90       	ld	r0, -Z
     efe:	0e 92       	st	-X, r0
     f00:	41 50       	subi	r20, 0x01	; 1
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	d8 f7       	brcc	.-10     	; 0xefc <memmove+0x14>
     f06:	08 95       	ret
     f08:	e6 cf       	rjmp	.-52     	; 0xed6 <memcpy>

00000f0a <strcmp>:
     f0a:	fb 01       	movw	r30, r22
     f0c:	dc 01       	movw	r26, r24
     f0e:	8d 91       	ld	r24, X+
     f10:	01 90       	ld	r0, Z+
     f12:	80 19       	sub	r24, r0
     f14:	01 10       	cpse	r0, r1
     f16:	d9 f3       	breq	.-10     	; 0xf0e <strcmp+0x4>
     f18:	99 0b       	sbc	r25, r25
     f1a:	08 95       	ret

00000f1c <strcpy>:
     f1c:	fb 01       	movw	r30, r22
     f1e:	dc 01       	movw	r26, r24
     f20:	01 90       	ld	r0, Z+
     f22:	0d 92       	st	X+, r0
     f24:	00 20       	and	r0, r0
     f26:	e1 f7       	brne	.-8      	; 0xf20 <strcpy+0x4>
     f28:	08 95       	ret

00000f2a <strncmp>:
     f2a:	fb 01       	movw	r30, r22
     f2c:	dc 01       	movw	r26, r24
     f2e:	41 50       	subi	r20, 0x01	; 1
     f30:	50 40       	sbci	r21, 0x00	; 0
     f32:	30 f0       	brcs	.+12     	; 0xf40 <strncmp+0x16>
     f34:	8d 91       	ld	r24, X+
     f36:	01 90       	ld	r0, Z+
     f38:	80 19       	sub	r24, r0
     f3a:	19 f4       	brne	.+6      	; 0xf42 <strncmp+0x18>
     f3c:	00 20       	and	r0, r0
     f3e:	b9 f7       	brne	.-18     	; 0xf2e <strncmp+0x4>
     f40:	88 1b       	sub	r24, r24
     f42:	99 0b       	sbc	r25, r25
     f44:	08 95       	ret

00000f46 <strstr>:
     f46:	fb 01       	movw	r30, r22
     f48:	51 91       	ld	r21, Z+
     f4a:	55 23       	and	r21, r21
     f4c:	a9 f0       	breq	.+42     	; 0xf78 <strstr+0x32>
     f4e:	bf 01       	movw	r22, r30
     f50:	dc 01       	movw	r26, r24
     f52:	4d 91       	ld	r20, X+
     f54:	45 17       	cp	r20, r21
     f56:	41 11       	cpse	r20, r1
     f58:	e1 f7       	brne	.-8      	; 0xf52 <strstr+0xc>
     f5a:	59 f4       	brne	.+22     	; 0xf72 <strstr+0x2c>
     f5c:	cd 01       	movw	r24, r26
     f5e:	01 90       	ld	r0, Z+
     f60:	00 20       	and	r0, r0
     f62:	49 f0       	breq	.+18     	; 0xf76 <strstr+0x30>
     f64:	4d 91       	ld	r20, X+
     f66:	40 15       	cp	r20, r0
     f68:	41 11       	cpse	r20, r1
     f6a:	c9 f3       	breq	.-14     	; 0xf5e <strstr+0x18>
     f6c:	fb 01       	movw	r30, r22
     f6e:	41 11       	cpse	r20, r1
     f70:	ef cf       	rjmp	.-34     	; 0xf50 <strstr+0xa>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	08 95       	ret

00000f7a <strtok_r>:
     f7a:	fa 01       	movw	r30, r20
     f7c:	a1 91       	ld	r26, Z+
     f7e:	b0 81       	ld	r27, Z
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	19 f4       	brne	.+6      	; 0xf8a <strtok_r+0x10>
     f84:	10 97       	sbiw	r26, 0x00	; 0
     f86:	e1 f0       	breq	.+56     	; 0xfc0 <strtok_r+0x46>
     f88:	cd 01       	movw	r24, r26
     f8a:	dc 01       	movw	r26, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0d 90       	ld	r0, X+
     f90:	00 20       	and	r0, r0
     f92:	11 f4       	brne	.+4      	; 0xf98 <strtok_r+0x1e>
     f94:	c0 01       	movw	r24, r0
     f96:	13 c0       	rjmp	.+38     	; 0xfbe <strtok_r+0x44>
     f98:	fb 01       	movw	r30, r22
     f9a:	21 91       	ld	r18, Z+
     f9c:	22 23       	and	r18, r18
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <strtok_r+0x2c>
     fa0:	20 15       	cp	r18, r0
     fa2:	d9 f7       	brne	.-10     	; 0xf9a <strtok_r+0x20>
     fa4:	f3 cf       	rjmp	.-26     	; 0xf8c <strtok_r+0x12>
     fa6:	fb 01       	movw	r30, r22
     fa8:	21 91       	ld	r18, Z+
     faa:	20 15       	cp	r18, r0
     fac:	19 f4       	brne	.+6      	; 0xfb4 <strtok_r+0x3a>
     fae:	1e 92       	st	-X, r1
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <strtok_r+0x46>
     fb4:	22 23       	and	r18, r18
     fb6:	c1 f7       	brne	.-16     	; 0xfa8 <strtok_r+0x2e>
     fb8:	0d 90       	ld	r0, X+
     fba:	00 20       	and	r0, r0
     fbc:	a1 f7       	brne	.-24     	; 0xfa6 <strtok_r+0x2c>
     fbe:	d0 01       	movw	r26, r0
     fc0:	fa 01       	movw	r30, r20
     fc2:	a1 93       	st	Z+, r26
     fc4:	b0 83       	st	Z, r27
     fc6:	08 95       	ret

00000fc8 <__mulhi_const_10>:
     fc8:	7a e0       	ldi	r23, 0x0A	; 10
     fca:	97 9f       	mul	r25, r23
     fcc:	90 2d       	mov	r25, r0
     fce:	87 9f       	mul	r24, r23
     fd0:	80 2d       	mov	r24, r0
     fd2:	91 0d       	add	r25, r1
     fd4:	11 24       	eor	r1, r1
     fd6:	08 95       	ret

00000fd8 <sprintf>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	2e 97       	sbiw	r28, 0x0e	; 14
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	0d 89       	ldd	r16, Y+21	; 0x15
     ff2:	1e 89       	ldd	r17, Y+22	; 0x16
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	1a 83       	std	Y+2, r17	; 0x02
     ffa:	09 83       	std	Y+1, r16	; 0x01
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f e7       	ldi	r25, 0x7F	; 127
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	ae 01       	movw	r20, r28
    1006:	47 5e       	subi	r20, 0xE7	; 231
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	6f 89       	ldd	r22, Y+23	; 0x17
    100c:	78 8d       	ldd	r23, Y+24	; 0x18
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	10 d0       	rcall	.+32     	; 0x1034 <vfprintf>
    1014:	ef 81       	ldd	r30, Y+7	; 0x07
    1016:	f8 85       	ldd	r31, Y+8	; 0x08
    1018:	e0 0f       	add	r30, r16
    101a:	f1 1f       	adc	r31, r17
    101c:	10 82       	st	Z, r1
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <vfprintf>:
    1034:	2f 92       	push	r2
    1036:	3f 92       	push	r3
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2b 97       	sbiw	r28, 0x0b	; 11
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	6c 01       	movw	r12, r24
    106a:	7b 01       	movw	r14, r22
    106c:	8a 01       	movw	r16, r20
    106e:	fc 01       	movw	r30, r24
    1070:	17 82       	std	Z+7, r1	; 0x07
    1072:	16 82       	std	Z+6, r1	; 0x06
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	81 ff       	sbrs	r24, 1
    1078:	bf c1       	rjmp	.+894    	; 0x13f8 <__stack+0x2f9>
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	3c 01       	movw	r6, r24
    1080:	f6 01       	movw	r30, r12
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	f7 01       	movw	r30, r14
    1086:	93 fd       	sbrc	r25, 3
    1088:	85 91       	lpm	r24, Z+
    108a:	93 ff       	sbrs	r25, 3
    108c:	81 91       	ld	r24, Z+
    108e:	7f 01       	movw	r14, r30
    1090:	88 23       	and	r24, r24
    1092:	09 f4       	brne	.+2      	; 0x1096 <vfprintf+0x62>
    1094:	ad c1       	rjmp	.+858    	; 0x13f0 <__stack+0x2f1>
    1096:	85 32       	cpi	r24, 0x25	; 37
    1098:	39 f4       	brne	.+14     	; 0x10a8 <vfprintf+0x74>
    109a:	93 fd       	sbrc	r25, 3
    109c:	85 91       	lpm	r24, Z+
    109e:	93 ff       	sbrs	r25, 3
    10a0:	81 91       	ld	r24, Z+
    10a2:	7f 01       	movw	r14, r30
    10a4:	85 32       	cpi	r24, 0x25	; 37
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <vfprintf+0x7c>
    10a8:	b6 01       	movw	r22, r12
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	d6 d1       	rcall	.+940    	; 0x145a <fputc>
    10ae:	e8 cf       	rjmp	.-48     	; 0x1080 <vfprintf+0x4c>
    10b0:	91 2c       	mov	r9, r1
    10b2:	21 2c       	mov	r2, r1
    10b4:	31 2c       	mov	r3, r1
    10b6:	ff e1       	ldi	r31, 0x1F	; 31
    10b8:	f3 15       	cp	r31, r3
    10ba:	d8 f0       	brcs	.+54     	; 0x10f2 <vfprintf+0xbe>
    10bc:	8b 32       	cpi	r24, 0x2B	; 43
    10be:	79 f0       	breq	.+30     	; 0x10de <vfprintf+0xaa>
    10c0:	38 f4       	brcc	.+14     	; 0x10d0 <vfprintf+0x9c>
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	79 f0       	breq	.+30     	; 0x10e4 <vfprintf+0xb0>
    10c6:	83 32       	cpi	r24, 0x23	; 35
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <vfprintf+0xbe>
    10ca:	23 2d       	mov	r18, r3
    10cc:	20 61       	ori	r18, 0x10	; 16
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <__stack+0xb>
    10d0:	8d 32       	cpi	r24, 0x2D	; 45
    10d2:	61 f0       	breq	.+24     	; 0x10ec <vfprintf+0xb8>
    10d4:	80 33       	cpi	r24, 0x30	; 48
    10d6:	69 f4       	brne	.+26     	; 0x10f2 <vfprintf+0xbe>
    10d8:	23 2d       	mov	r18, r3
    10da:	21 60       	ori	r18, 0x01	; 1
    10dc:	16 c0       	rjmp	.+44     	; 0x110a <__stack+0xb>
    10de:	83 2d       	mov	r24, r3
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	38 2e       	mov	r3, r24
    10e4:	e3 2d       	mov	r30, r3
    10e6:	e4 60       	ori	r30, 0x04	; 4
    10e8:	3e 2e       	mov	r3, r30
    10ea:	2a c0       	rjmp	.+84     	; 0x1140 <__stack+0x41>
    10ec:	f3 2d       	mov	r31, r3
    10ee:	f8 60       	ori	r31, 0x08	; 8
    10f0:	1d c0       	rjmp	.+58     	; 0x112c <__stack+0x2d>
    10f2:	37 fc       	sbrc	r3, 7
    10f4:	2d c0       	rjmp	.+90     	; 0x1150 <__stack+0x51>
    10f6:	20 ed       	ldi	r18, 0xD0	; 208
    10f8:	28 0f       	add	r18, r24
    10fa:	2a 30       	cpi	r18, 0x0A	; 10
    10fc:	40 f0       	brcs	.+16     	; 0x110e <__stack+0xf>
    10fe:	8e 32       	cpi	r24, 0x2E	; 46
    1100:	b9 f4       	brne	.+46     	; 0x1130 <__stack+0x31>
    1102:	36 fc       	sbrc	r3, 6
    1104:	75 c1       	rjmp	.+746    	; 0x13f0 <__stack+0x2f1>
    1106:	23 2d       	mov	r18, r3
    1108:	20 64       	ori	r18, 0x40	; 64
    110a:	32 2e       	mov	r3, r18
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <__stack+0x41>
    110e:	36 fe       	sbrs	r3, 6
    1110:	06 c0       	rjmp	.+12     	; 0x111e <__stack+0x1f>
    1112:	8a e0       	ldi	r24, 0x0A	; 10
    1114:	98 9e       	mul	r9, r24
    1116:	20 0d       	add	r18, r0
    1118:	11 24       	eor	r1, r1
    111a:	92 2e       	mov	r9, r18
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <__stack+0x41>
    111e:	ea e0       	ldi	r30, 0x0A	; 10
    1120:	2e 9e       	mul	r2, r30
    1122:	20 0d       	add	r18, r0
    1124:	11 24       	eor	r1, r1
    1126:	22 2e       	mov	r2, r18
    1128:	f3 2d       	mov	r31, r3
    112a:	f0 62       	ori	r31, 0x20	; 32
    112c:	3f 2e       	mov	r3, r31
    112e:	08 c0       	rjmp	.+16     	; 0x1140 <__stack+0x41>
    1130:	8c 36       	cpi	r24, 0x6C	; 108
    1132:	21 f4       	brne	.+8      	; 0x113c <__stack+0x3d>
    1134:	83 2d       	mov	r24, r3
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	38 2e       	mov	r3, r24
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__stack+0x41>
    113c:	88 36       	cpi	r24, 0x68	; 104
    113e:	41 f4       	brne	.+16     	; 0x1150 <__stack+0x51>
    1140:	f7 01       	movw	r30, r14
    1142:	93 fd       	sbrc	r25, 3
    1144:	85 91       	lpm	r24, Z+
    1146:	93 ff       	sbrs	r25, 3
    1148:	81 91       	ld	r24, Z+
    114a:	7f 01       	movw	r14, r30
    114c:	81 11       	cpse	r24, r1
    114e:	b3 cf       	rjmp	.-154    	; 0x10b6 <vfprintf+0x82>
    1150:	98 2f       	mov	r25, r24
    1152:	9f 7d       	andi	r25, 0xDF	; 223
    1154:	95 54       	subi	r25, 0x45	; 69
    1156:	93 30       	cpi	r25, 0x03	; 3
    1158:	28 f4       	brcc	.+10     	; 0x1164 <__stack+0x65>
    115a:	0c 5f       	subi	r16, 0xFC	; 252
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	9f e3       	ldi	r25, 0x3F	; 63
    1160:	99 83       	std	Y+1, r25	; 0x01
    1162:	0d c0       	rjmp	.+26     	; 0x117e <__stack+0x7f>
    1164:	83 36       	cpi	r24, 0x63	; 99
    1166:	31 f0       	breq	.+12     	; 0x1174 <__stack+0x75>
    1168:	83 37       	cpi	r24, 0x73	; 115
    116a:	71 f0       	breq	.+28     	; 0x1188 <__stack+0x89>
    116c:	83 35       	cpi	r24, 0x53	; 83
    116e:	09 f0       	breq	.+2      	; 0x1172 <__stack+0x73>
    1170:	55 c0       	rjmp	.+170    	; 0x121c <__stack+0x11d>
    1172:	20 c0       	rjmp	.+64     	; 0x11b4 <__stack+0xb5>
    1174:	f8 01       	movw	r30, r16
    1176:	80 81       	ld	r24, Z
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	0e 5f       	subi	r16, 0xFE	; 254
    117c:	1f 4f       	sbci	r17, 0xFF	; 255
    117e:	88 24       	eor	r8, r8
    1180:	83 94       	inc	r8
    1182:	91 2c       	mov	r9, r1
    1184:	53 01       	movw	r10, r6
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <__stack+0xad>
    1188:	28 01       	movw	r4, r16
    118a:	f2 e0       	ldi	r31, 0x02	; 2
    118c:	4f 0e       	add	r4, r31
    118e:	51 1c       	adc	r5, r1
    1190:	f8 01       	movw	r30, r16
    1192:	a0 80       	ld	r10, Z
    1194:	b1 80       	ldd	r11, Z+1	; 0x01
    1196:	36 fe       	sbrs	r3, 6
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <__stack+0xa1>
    119a:	69 2d       	mov	r22, r9
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <__stack+0xa5>
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	7f ef       	ldi	r23, 0xFF	; 255
    11a4:	c5 01       	movw	r24, r10
    11a6:	4e d1       	rcall	.+668    	; 0x1444 <strnlen>
    11a8:	4c 01       	movw	r8, r24
    11aa:	82 01       	movw	r16, r4
    11ac:	f3 2d       	mov	r31, r3
    11ae:	ff 77       	andi	r31, 0x7F	; 127
    11b0:	3f 2e       	mov	r3, r31
    11b2:	15 c0       	rjmp	.+42     	; 0x11de <__stack+0xdf>
    11b4:	28 01       	movw	r4, r16
    11b6:	22 e0       	ldi	r18, 0x02	; 2
    11b8:	42 0e       	add	r4, r18
    11ba:	51 1c       	adc	r5, r1
    11bc:	f8 01       	movw	r30, r16
    11be:	a0 80       	ld	r10, Z
    11c0:	b1 80       	ldd	r11, Z+1	; 0x01
    11c2:	36 fe       	sbrs	r3, 6
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <__stack+0xcd>
    11c6:	69 2d       	mov	r22, r9
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <__stack+0xd1>
    11cc:	6f ef       	ldi	r22, 0xFF	; 255
    11ce:	7f ef       	ldi	r23, 0xFF	; 255
    11d0:	c5 01       	movw	r24, r10
    11d2:	2d d1       	rcall	.+602    	; 0x142e <strnlen_P>
    11d4:	4c 01       	movw	r8, r24
    11d6:	f3 2d       	mov	r31, r3
    11d8:	f0 68       	ori	r31, 0x80	; 128
    11da:	3f 2e       	mov	r3, r31
    11dc:	82 01       	movw	r16, r4
    11de:	33 fc       	sbrc	r3, 3
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <__stack+0x115>
    11e2:	82 2d       	mov	r24, r2
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	88 16       	cp	r8, r24
    11e8:	99 06       	cpc	r9, r25
    11ea:	a0 f4       	brcc	.+40     	; 0x1214 <__stack+0x115>
    11ec:	b6 01       	movw	r22, r12
    11ee:	80 e2       	ldi	r24, 0x20	; 32
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	33 d1       	rcall	.+614    	; 0x145a <fputc>
    11f4:	2a 94       	dec	r2
    11f6:	f5 cf       	rjmp	.-22     	; 0x11e2 <__stack+0xe3>
    11f8:	f5 01       	movw	r30, r10
    11fa:	37 fc       	sbrc	r3, 7
    11fc:	85 91       	lpm	r24, Z+
    11fe:	37 fe       	sbrs	r3, 7
    1200:	81 91       	ld	r24, Z+
    1202:	5f 01       	movw	r10, r30
    1204:	b6 01       	movw	r22, r12
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	28 d1       	rcall	.+592    	; 0x145a <fputc>
    120a:	21 10       	cpse	r2, r1
    120c:	2a 94       	dec	r2
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	82 1a       	sub	r8, r18
    1212:	91 08       	sbc	r9, r1
    1214:	81 14       	cp	r8, r1
    1216:	91 04       	cpc	r9, r1
    1218:	79 f7       	brne	.-34     	; 0x11f8 <__stack+0xf9>
    121a:	e1 c0       	rjmp	.+450    	; 0x13de <__stack+0x2df>
    121c:	84 36       	cpi	r24, 0x64	; 100
    121e:	11 f0       	breq	.+4      	; 0x1224 <__stack+0x125>
    1220:	89 36       	cpi	r24, 0x69	; 105
    1222:	39 f5       	brne	.+78     	; 0x1272 <__stack+0x173>
    1224:	f8 01       	movw	r30, r16
    1226:	37 fe       	sbrs	r3, 7
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <__stack+0x139>
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	0c 5f       	subi	r16, 0xFC	; 252
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <__stack+0x149>
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	07 2e       	mov	r0, r23
    123e:	00 0c       	add	r0, r0
    1240:	88 0b       	sbc	r24, r24
    1242:	99 0b       	sbc	r25, r25
    1244:	0e 5f       	subi	r16, 0xFE	; 254
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	f3 2d       	mov	r31, r3
    124a:	ff 76       	andi	r31, 0x6F	; 111
    124c:	3f 2e       	mov	r3, r31
    124e:	97 ff       	sbrs	r25, 7
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <__stack+0x165>
    1252:	90 95       	com	r25
    1254:	80 95       	com	r24
    1256:	70 95       	com	r23
    1258:	61 95       	neg	r22
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	8f 4f       	sbci	r24, 0xFF	; 255
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	f0 68       	ori	r31, 0x80	; 128
    1262:	3f 2e       	mov	r3, r31
    1264:	2a e0       	ldi	r18, 0x0A	; 10
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	a3 01       	movw	r20, r6
    126a:	33 d1       	rcall	.+614    	; 0x14d2 <__ultoa_invert>
    126c:	88 2e       	mov	r8, r24
    126e:	86 18       	sub	r8, r6
    1270:	44 c0       	rjmp	.+136    	; 0x12fa <__stack+0x1fb>
    1272:	85 37       	cpi	r24, 0x75	; 117
    1274:	31 f4       	brne	.+12     	; 0x1282 <__stack+0x183>
    1276:	23 2d       	mov	r18, r3
    1278:	2f 7e       	andi	r18, 0xEF	; 239
    127a:	b2 2e       	mov	r11, r18
    127c:	2a e0       	ldi	r18, 0x0A	; 10
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	25 c0       	rjmp	.+74     	; 0x12cc <__stack+0x1cd>
    1282:	93 2d       	mov	r25, r3
    1284:	99 7f       	andi	r25, 0xF9	; 249
    1286:	b9 2e       	mov	r11, r25
    1288:	8f 36       	cpi	r24, 0x6F	; 111
    128a:	c1 f0       	breq	.+48     	; 0x12bc <__stack+0x1bd>
    128c:	18 f4       	brcc	.+6      	; 0x1294 <__stack+0x195>
    128e:	88 35       	cpi	r24, 0x58	; 88
    1290:	79 f0       	breq	.+30     	; 0x12b0 <__stack+0x1b1>
    1292:	ae c0       	rjmp	.+348    	; 0x13f0 <__stack+0x2f1>
    1294:	80 37       	cpi	r24, 0x70	; 112
    1296:	19 f0       	breq	.+6      	; 0x129e <__stack+0x19f>
    1298:	88 37       	cpi	r24, 0x78	; 120
    129a:	21 f0       	breq	.+8      	; 0x12a4 <__stack+0x1a5>
    129c:	a9 c0       	rjmp	.+338    	; 0x13f0 <__stack+0x2f1>
    129e:	e9 2f       	mov	r30, r25
    12a0:	e0 61       	ori	r30, 0x10	; 16
    12a2:	be 2e       	mov	r11, r30
    12a4:	b4 fe       	sbrs	r11, 4
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <__stack+0x1c3>
    12a8:	fb 2d       	mov	r31, r11
    12aa:	f4 60       	ori	r31, 0x04	; 4
    12ac:	bf 2e       	mov	r11, r31
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <__stack+0x1c3>
    12b0:	34 fe       	sbrs	r3, 4
    12b2:	0a c0       	rjmp	.+20     	; 0x12c8 <__stack+0x1c9>
    12b4:	29 2f       	mov	r18, r25
    12b6:	26 60       	ori	r18, 0x06	; 6
    12b8:	b2 2e       	mov	r11, r18
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <__stack+0x1c9>
    12bc:	28 e0       	ldi	r18, 0x08	; 8
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <__stack+0x1cd>
    12c2:	20 e1       	ldi	r18, 0x10	; 16
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <__stack+0x1cd>
    12c8:	20 e1       	ldi	r18, 0x10	; 16
    12ca:	32 e0       	ldi	r19, 0x02	; 2
    12cc:	f8 01       	movw	r30, r16
    12ce:	b7 fe       	sbrs	r11, 7
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <__stack+0x1e1>
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	0c 5f       	subi	r16, 0xFC	; 252
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <__stack+0x1ed>
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 5f       	subi	r16, 0xFE	; 254
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	a3 01       	movw	r20, r6
    12ee:	f1 d0       	rcall	.+482    	; 0x14d2 <__ultoa_invert>
    12f0:	88 2e       	mov	r8, r24
    12f2:	86 18       	sub	r8, r6
    12f4:	fb 2d       	mov	r31, r11
    12f6:	ff 77       	andi	r31, 0x7F	; 127
    12f8:	3f 2e       	mov	r3, r31
    12fa:	36 fe       	sbrs	r3, 6
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <__stack+0x219>
    12fe:	23 2d       	mov	r18, r3
    1300:	2e 7f       	andi	r18, 0xFE	; 254
    1302:	a2 2e       	mov	r10, r18
    1304:	89 14       	cp	r8, r9
    1306:	58 f4       	brcc	.+22     	; 0x131e <__stack+0x21f>
    1308:	34 fe       	sbrs	r3, 4
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <__stack+0x223>
    130c:	32 fc       	sbrc	r3, 2
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <__stack+0x223>
    1310:	83 2d       	mov	r24, r3
    1312:	8e 7e       	andi	r24, 0xEE	; 238
    1314:	a8 2e       	mov	r10, r24
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <__stack+0x223>
    1318:	b8 2c       	mov	r11, r8
    131a:	a3 2c       	mov	r10, r3
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <__stack+0x225>
    131e:	b8 2c       	mov	r11, r8
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <__stack+0x225>
    1322:	b9 2c       	mov	r11, r9
    1324:	a4 fe       	sbrs	r10, 4
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <__stack+0x247>
    1328:	fe 01       	movw	r30, r28
    132a:	e8 0d       	add	r30, r8
    132c:	f1 1d       	adc	r31, r1
    132e:	80 81       	ld	r24, Z
    1330:	80 33       	cpi	r24, 0x30	; 48
    1332:	21 f4       	brne	.+8      	; 0x133c <__stack+0x23d>
    1334:	9a 2d       	mov	r25, r10
    1336:	99 7e       	andi	r25, 0xE9	; 233
    1338:	a9 2e       	mov	r10, r25
    133a:	09 c0       	rjmp	.+18     	; 0x134e <__stack+0x24f>
    133c:	a2 fe       	sbrs	r10, 2
    133e:	06 c0       	rjmp	.+12     	; 0x134c <__stack+0x24d>
    1340:	b3 94       	inc	r11
    1342:	b3 94       	inc	r11
    1344:	04 c0       	rjmp	.+8      	; 0x134e <__stack+0x24f>
    1346:	8a 2d       	mov	r24, r10
    1348:	86 78       	andi	r24, 0x86	; 134
    134a:	09 f0       	breq	.+2      	; 0x134e <__stack+0x24f>
    134c:	b3 94       	inc	r11
    134e:	a3 fc       	sbrc	r10, 3
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <__stack+0x273>
    1352:	a0 fe       	sbrs	r10, 0
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <__stack+0x263>
    1356:	b2 14       	cp	r11, r2
    1358:	80 f4       	brcc	.+32     	; 0x137a <__stack+0x27b>
    135a:	28 0c       	add	r2, r8
    135c:	92 2c       	mov	r9, r2
    135e:	9b 18       	sub	r9, r11
    1360:	0d c0       	rjmp	.+26     	; 0x137c <__stack+0x27d>
    1362:	b2 14       	cp	r11, r2
    1364:	58 f4       	brcc	.+22     	; 0x137c <__stack+0x27d>
    1366:	b6 01       	movw	r22, r12
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	76 d0       	rcall	.+236    	; 0x145a <fputc>
    136e:	b3 94       	inc	r11
    1370:	f8 cf       	rjmp	.-16     	; 0x1362 <__stack+0x263>
    1372:	b2 14       	cp	r11, r2
    1374:	18 f4       	brcc	.+6      	; 0x137c <__stack+0x27d>
    1376:	2b 18       	sub	r2, r11
    1378:	02 c0       	rjmp	.+4      	; 0x137e <__stack+0x27f>
    137a:	98 2c       	mov	r9, r8
    137c:	21 2c       	mov	r2, r1
    137e:	a4 fe       	sbrs	r10, 4
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <__stack+0x2a1>
    1382:	b6 01       	movw	r22, r12
    1384:	80 e3       	ldi	r24, 0x30	; 48
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	68 d0       	rcall	.+208    	; 0x145a <fputc>
    138a:	a2 fe       	sbrs	r10, 2
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <__stack+0x2bb>
    138e:	a1 fc       	sbrc	r10, 1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <__stack+0x299>
    1392:	88 e7       	ldi	r24, 0x78	; 120
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <__stack+0x29d>
    1398:	88 e5       	ldi	r24, 0x58	; 88
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	b6 01       	movw	r22, r12
    139e:	0c c0       	rjmp	.+24     	; 0x13b8 <__stack+0x2b9>
    13a0:	8a 2d       	mov	r24, r10
    13a2:	86 78       	andi	r24, 0x86	; 134
    13a4:	51 f0       	breq	.+20     	; 0x13ba <__stack+0x2bb>
    13a6:	a1 fe       	sbrs	r10, 1
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <__stack+0x2af>
    13aa:	8b e2       	ldi	r24, 0x2B	; 43
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <__stack+0x2b1>
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	a7 fc       	sbrc	r10, 7
    13b2:	8d e2       	ldi	r24, 0x2D	; 45
    13b4:	b6 01       	movw	r22, r12
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	50 d0       	rcall	.+160    	; 0x145a <fputc>
    13ba:	89 14       	cp	r8, r9
    13bc:	30 f4       	brcc	.+12     	; 0x13ca <__stack+0x2cb>
    13be:	b6 01       	movw	r22, r12
    13c0:	80 e3       	ldi	r24, 0x30	; 48
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	4a d0       	rcall	.+148    	; 0x145a <fputc>
    13c6:	9a 94       	dec	r9
    13c8:	f8 cf       	rjmp	.-16     	; 0x13ba <__stack+0x2bb>
    13ca:	8a 94       	dec	r8
    13cc:	f3 01       	movw	r30, r6
    13ce:	e8 0d       	add	r30, r8
    13d0:	f1 1d       	adc	r31, r1
    13d2:	80 81       	ld	r24, Z
    13d4:	b6 01       	movw	r22, r12
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	40 d0       	rcall	.+128    	; 0x145a <fputc>
    13da:	81 10       	cpse	r8, r1
    13dc:	f6 cf       	rjmp	.-20     	; 0x13ca <__stack+0x2cb>
    13de:	22 20       	and	r2, r2
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <__stack+0x2e5>
    13e2:	4e ce       	rjmp	.-868    	; 0x1080 <vfprintf+0x4c>
    13e4:	b6 01       	movw	r22, r12
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	37 d0       	rcall	.+110    	; 0x145a <fputc>
    13ec:	2a 94       	dec	r2
    13ee:	f7 cf       	rjmp	.-18     	; 0x13de <__stack+0x2df>
    13f0:	f6 01       	movw	r30, r12
    13f2:	86 81       	ldd	r24, Z+6	; 0x06
    13f4:	97 81       	ldd	r25, Z+7	; 0x07
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <__stack+0x2fd>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	2b 96       	adiw	r28, 0x0b	; 11
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	7f 90       	pop	r7
    1422:	6f 90       	pop	r6
    1424:	5f 90       	pop	r5
    1426:	4f 90       	pop	r4
    1428:	3f 90       	pop	r3
    142a:	2f 90       	pop	r2
    142c:	08 95       	ret

0000142e <strnlen_P>:
    142e:	fc 01       	movw	r30, r24
    1430:	05 90       	lpm	r0, Z+
    1432:	61 50       	subi	r22, 0x01	; 1
    1434:	70 40       	sbci	r23, 0x00	; 0
    1436:	01 10       	cpse	r0, r1
    1438:	d8 f7       	brcc	.-10     	; 0x1430 <strnlen_P+0x2>
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	8e 0f       	add	r24, r30
    1440:	9f 1f       	adc	r25, r31
    1442:	08 95       	ret

00001444 <strnlen>:
    1444:	fc 01       	movw	r30, r24
    1446:	61 50       	subi	r22, 0x01	; 1
    1448:	70 40       	sbci	r23, 0x00	; 0
    144a:	01 90       	ld	r0, Z+
    144c:	01 10       	cpse	r0, r1
    144e:	d8 f7       	brcc	.-10     	; 0x1446 <strnlen+0x2>
    1450:	80 95       	com	r24
    1452:	90 95       	com	r25
    1454:	8e 0f       	add	r24, r30
    1456:	9f 1f       	adc	r25, r31
    1458:	08 95       	ret

0000145a <fputc>:
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	fb 01       	movw	r30, r22
    1464:	23 81       	ldd	r18, Z+3	; 0x03
    1466:	21 fd       	sbrc	r18, 1
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <fputc+0x16>
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	9f ef       	ldi	r25, 0xFF	; 255
    146e:	2c c0       	rjmp	.+88     	; 0x14c8 <fputc+0x6e>
    1470:	22 ff       	sbrs	r18, 2
    1472:	16 c0       	rjmp	.+44     	; 0x14a0 <fputc+0x46>
    1474:	46 81       	ldd	r20, Z+6	; 0x06
    1476:	57 81       	ldd	r21, Z+7	; 0x07
    1478:	24 81       	ldd	r18, Z+4	; 0x04
    147a:	35 81       	ldd	r19, Z+5	; 0x05
    147c:	42 17       	cp	r20, r18
    147e:	53 07       	cpc	r21, r19
    1480:	44 f4       	brge	.+16     	; 0x1492 <fputc+0x38>
    1482:	a0 81       	ld	r26, Z
    1484:	b1 81       	ldd	r27, Z+1	; 0x01
    1486:	9d 01       	movw	r18, r26
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	31 83       	std	Z+1, r19	; 0x01
    148e:	20 83       	st	Z, r18
    1490:	8c 93       	st	X, r24
    1492:	26 81       	ldd	r18, Z+6	; 0x06
    1494:	37 81       	ldd	r19, Z+7	; 0x07
    1496:	2f 5f       	subi	r18, 0xFF	; 255
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	37 83       	std	Z+7, r19	; 0x07
    149c:	26 83       	std	Z+6, r18	; 0x06
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <fputc+0x6e>
    14a0:	8b 01       	movw	r16, r22
    14a2:	ec 01       	movw	r28, r24
    14a4:	fb 01       	movw	r30, r22
    14a6:	00 84       	ldd	r0, Z+8	; 0x08
    14a8:	f1 85       	ldd	r31, Z+9	; 0x09
    14aa:	e0 2d       	mov	r30, r0
    14ac:	09 95       	icall
    14ae:	89 2b       	or	r24, r25
    14b0:	e1 f6       	brne	.-72     	; 0x146a <fputc+0x10>
    14b2:	d8 01       	movw	r26, r16
    14b4:	16 96       	adiw	r26, 0x06	; 6
    14b6:	8d 91       	ld	r24, X+
    14b8:	9c 91       	ld	r25, X
    14ba:	17 97       	sbiw	r26, 0x07	; 7
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	17 96       	adiw	r26, 0x07	; 7
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	16 97       	sbiw	r26, 0x06	; 6
    14c6:	ce 01       	movw	r24, r28
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <__ultoa_invert>:
    14d2:	fa 01       	movw	r30, r20
    14d4:	aa 27       	eor	r26, r26
    14d6:	28 30       	cpi	r18, 0x08	; 8
    14d8:	51 f1       	breq	.+84     	; 0x152e <__ultoa_invert+0x5c>
    14da:	20 31       	cpi	r18, 0x10	; 16
    14dc:	81 f1       	breq	.+96     	; 0x153e <__ultoa_invert+0x6c>
    14de:	e8 94       	clt
    14e0:	6f 93       	push	r22
    14e2:	6e 7f       	andi	r22, 0xFE	; 254
    14e4:	6e 5f       	subi	r22, 0xFE	; 254
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	af 4f       	sbci	r26, 0xFF	; 255
    14ee:	b1 e0       	ldi	r27, 0x01	; 1
    14f0:	3e d0       	rcall	.+124    	; 0x156e <__ultoa_invert+0x9c>
    14f2:	b4 e0       	ldi	r27, 0x04	; 4
    14f4:	3c d0       	rcall	.+120    	; 0x156e <__ultoa_invert+0x9c>
    14f6:	67 0f       	add	r22, r23
    14f8:	78 1f       	adc	r23, r24
    14fa:	89 1f       	adc	r24, r25
    14fc:	9a 1f       	adc	r25, r26
    14fe:	a1 1d       	adc	r26, r1
    1500:	68 0f       	add	r22, r24
    1502:	79 1f       	adc	r23, r25
    1504:	8a 1f       	adc	r24, r26
    1506:	91 1d       	adc	r25, r1
    1508:	a1 1d       	adc	r26, r1
    150a:	6a 0f       	add	r22, r26
    150c:	71 1d       	adc	r23, r1
    150e:	81 1d       	adc	r24, r1
    1510:	91 1d       	adc	r25, r1
    1512:	a1 1d       	adc	r26, r1
    1514:	20 d0       	rcall	.+64     	; 0x1556 <__ultoa_invert+0x84>
    1516:	09 f4       	brne	.+2      	; 0x151a <__ultoa_invert+0x48>
    1518:	68 94       	set
    151a:	3f 91       	pop	r19
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	26 9f       	mul	r18, r22
    1520:	11 24       	eor	r1, r1
    1522:	30 19       	sub	r19, r0
    1524:	30 5d       	subi	r19, 0xD0	; 208
    1526:	31 93       	st	Z+, r19
    1528:	de f6       	brtc	.-74     	; 0x14e0 <__ultoa_invert+0xe>
    152a:	cf 01       	movw	r24, r30
    152c:	08 95       	ret
    152e:	46 2f       	mov	r20, r22
    1530:	47 70       	andi	r20, 0x07	; 7
    1532:	40 5d       	subi	r20, 0xD0	; 208
    1534:	41 93       	st	Z+, r20
    1536:	b3 e0       	ldi	r27, 0x03	; 3
    1538:	0f d0       	rcall	.+30     	; 0x1558 <__ultoa_invert+0x86>
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0x5c>
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <__ultoa_invert+0x58>
    153e:	46 2f       	mov	r20, r22
    1540:	4f 70       	andi	r20, 0x0F	; 15
    1542:	40 5d       	subi	r20, 0xD0	; 208
    1544:	4a 33       	cpi	r20, 0x3A	; 58
    1546:	18 f0       	brcs	.+6      	; 0x154e <__ultoa_invert+0x7c>
    1548:	49 5d       	subi	r20, 0xD9	; 217
    154a:	31 fd       	sbrc	r19, 1
    154c:	40 52       	subi	r20, 0x20	; 32
    154e:	41 93       	st	Z+, r20
    1550:	02 d0       	rcall	.+4      	; 0x1556 <__ultoa_invert+0x84>
    1552:	a9 f7       	brne	.-22     	; 0x153e <__ultoa_invert+0x6c>
    1554:	ea cf       	rjmp	.-44     	; 0x152a <__ultoa_invert+0x58>
    1556:	b4 e0       	ldi	r27, 0x04	; 4
    1558:	a6 95       	lsr	r26
    155a:	97 95       	ror	r25
    155c:	87 95       	ror	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	ba 95       	dec	r27
    1564:	c9 f7       	brne	.-14     	; 0x1558 <__ultoa_invert+0x86>
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 05       	cpc	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	08 95       	ret
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	0a 2e       	mov	r0, r26
    1574:	06 94       	lsr	r0
    1576:	57 95       	ror	r21
    1578:	47 95       	ror	r20
    157a:	37 95       	ror	r19
    157c:	27 95       	ror	r18
    157e:	ba 95       	dec	r27
    1580:	c9 f7       	brne	.-14     	; 0x1574 <__ultoa_invert+0xa2>
    1582:	62 0f       	add	r22, r18
    1584:	73 1f       	adc	r23, r19
    1586:	84 1f       	adc	r24, r20
    1588:	95 1f       	adc	r25, r21
    158a:	a0 1d       	adc	r26, r0
    158c:	08 95       	ret

0000158e <_exit>:
    158e:	f8 94       	cli

00001590 <__stop_program>:
    1590:	ff cf       	rjmp	.-2      	; 0x1590 <__stop_program>
